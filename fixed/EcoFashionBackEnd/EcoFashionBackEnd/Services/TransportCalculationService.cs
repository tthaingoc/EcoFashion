using EcoFashionBackEnd.Common.Payloads.Requests;

namespace EcoFashionBackEnd.Services
{
    public class TransportCalculationService
    {
        // Supported 12 countries with focus on sustainability and major textile production
        private static readonly Dictionary<string, CountryTransportInfo> SupportedCountries = new()
        {
            { 
                "Vietnam", 
                new CountryTransportInfo 
                { 
                    Distance = 0, 
                    Flag = "üáªüá≥",
                    SustainabilityRating = "Excellent",
                    Description = "S·∫£n xu·∫•t trong n∆∞·ªõc - Kh√¥ng c√≥ carbon footprint v·∫≠n chuy·ªÉn",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Land", 0, "LocalShipping", "V·∫≠n chuy·ªÉn n·ªôi ƒë·ªãa", true),
                        new("Rail", 0, "Train", "ƒê∆∞·ªùng s·∫Øt n·ªôi ƒë·ªãa", true),
                        new("Sea", 0, "DirectionsBoat", "V·∫≠n chuy·ªÉn ven bi·ªÉn", true)
                    }
                }
            },
            { 
                "China", 
                new CountryTransportInfo 
                { 
                    Distance = 1200, 
                    Flag = "üá®üá≥",
                    SustainabilityRating = "Good",
                    Description = "Qu·ªëc gia s·∫£n xu·∫•t v·∫£i l·ªõn nh·∫•t th·∫ø gi·ªõi",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Land", 1200, "LocalShipping", "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i qua bi√™n gi·ªõi", true),
                        new("Rail", 1150, "Train", "ƒê∆∞·ªùng s·∫Øt xuy√™n bi√™n gi·ªõi - Hi·ªáu qu·∫£ cao", true),
                        new("Sea", 1800, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 1200, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh nh·∫•t", false)
                    }
                }
            },
            { 
                "India", 
                new CountryTransportInfo 
                { 
                    Distance = 3500, 
                    Flag = "üáÆüá≥",
                    SustainabilityRating = "Good",
                    Description = "Trung t√¢m s·∫£n xu·∫•t cotton h·ªØu c∆° v√† v·∫£i b·ªÅn v·ªØng",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 4200, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - Ph∆∞∆°ng th·ª©c t·ªëi ∆∞u", true),
                        new("Air", 3500, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false),
                        new("Land", 4800, "LocalShipping", "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i - Th·ªùi gian d√†i", false)
                    }
                }
            },
            { 
                "Japan", 
                new CountryTransportInfo 
                { 
                    Distance = 3200, 
                    Flag = "üáØüáµ",
                    SustainabilityRating = "Excellent",
                    Description = "C√¥ng ngh·ªá v·∫£i ti√™n ti·∫øn v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 3200, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 3200, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Giao h√†ng nhanh", false)
                    }
                }
            },
            { 
                "Korea", 
                new CountryTransportInfo 
                { 
                    Distance = 2800, 
                    Flag = "üá∞üá∑",
                    SustainabilityRating = "Excellent", 
                    Description = "C√¥ng ngh·ªá v·∫£i th√¥ng minh v√† b·ªÅn v·ªØng",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 2800, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 2800, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Giao h√†ng nhanh", false)
                    }
                }
            },
            { 
                "United States", 
                new CountryTransportInfo 
                { 
                    Distance = 14000, 
                    Flag = "üá∫üá∏",
                    SustainabilityRating = "Fair",
                    Description = "S·∫£n xu·∫•t cotton h·ªØu c∆° v√† c√¥ng ngh·ªá v·∫£i t√°i ch·∫ø",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 14000, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 14000, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false)
                    }
                }
            },
            { 
                "Turkey", 
                new CountryTransportInfo 
                { 
                    Distance = 8500, 
                    Flag = "üáπüá∑",
                    SustainabilityRating = "Good",
                    Description = "Trung t√¢m s·∫£n xu·∫•t v·∫£i b·ªÅn v·ªØng ch√¢u √Çu",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 9200, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 8500, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false),
                        new("Land", 12000, "LocalShipping", "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i - Th·ªùi gian d√†i", false)
                    }
                }
            },
            { 
                "Bangladesh", 
                new CountryTransportInfo 
                { 
                    Distance = 2500, 
                    Flag = "üáßüá©",
                    SustainabilityRating = "Fair",
                    Description = "S·∫£n xu·∫•t v·∫£i v·ªõi c√°c ti√™u chu·∫©n b·ªÅn v·ªØng ng√†y c√†ng cao",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 3000, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 2500, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false),
                        new("Land", 3200, "LocalShipping", "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i", false)
                    }
                }
            },
            { 
                "Indonesia", 
                new CountryTransportInfo 
                { 
                    Distance = 1800, 
                    Flag = "üáÆüá©",
                    SustainabilityRating = "Good",
                    Description = "S·∫£n xu·∫•t v·∫£i t·ª´ s·ª£i t·ª± nhi√™n b·ªÅn v·ªØng",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 1800, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 1800, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false)
                    }
                }
            },
            { 
                "Thailand", 
                new CountryTransportInfo 
                { 
                    Distance = 800, 
                    Flag = "üáπüá≠",
                    SustainabilityRating = "Good",
                    Description = "S·∫£n xu·∫•t v·∫£i silk v√† cotton h·ªØu c∆°",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Land", 800, "LocalShipping", "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i - Ph√π h·ª£p cho kho·∫£ng c√°ch ng·∫Øn", true),
                        new("Sea", 1200, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn", true),
                        new("Air", 800, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false)
                    }
                }
            },
            { 
                "Peru", 
                new CountryTransportInfo 
                { 
                    Distance = 19000, 
                    Flag = "üáµüá™",
                    SustainabilityRating = "Excellent",
                    Description = "S·∫£n xu·∫•t cotton Pima h·ªØu c∆° cao c·∫•p",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 19000, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 19000, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false)
                    }
                }
            },
            { 
                "Egypt", 
                new CountryTransportInfo 
                { 
                    Distance = 8000, 
                    Flag = "üá™üá¨",
                    SustainabilityRating = "Good",
                    Description = "S·∫£n xu·∫•t cotton ch·∫•t l∆∞·ª£ng cao v·ªõi ti√™u chu·∫©n b·ªÅn v·ªØng",
                    AvailableTransportMethods = new List<TransportMethodInfo>
                    {
                        new("Sea", 8500, "DirectionsBoat", "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t", true),
                        new("Air", 8000, "Flight", "V·∫≠n chuy·ªÉn h√†ng kh√¥ng - Nhanh ch√≥ng", false)
                    }
                }
            }
        };

        // Models for enhanced transport data
        public class CountryTransportInfo
        {
            public decimal Distance { get; set; }
            public string Flag { get; set; } = "";
            public string SustainabilityRating { get; set; } = "";
            public string Description { get; set; } = "";
            public List<TransportMethodInfo> AvailableTransportMethods { get; set; } = new();
        }

        public class TransportMethodInfo
        {
            public string Method { get; set; }
            public decimal Distance { get; set; }
            public string Icon { get; set; }
            public string Description { get; set; }
            public bool IsRecommended { get; set; }

            public TransportMethodInfo(string method, decimal distance, string icon, string description, bool isRecommended)
            {
                Method = method;
                Distance = distance;
                Icon = icon;
                Description = description;
                IsRecommended = isRecommended;
            }
        }

        public class TransportOverrideOption
        {
            public string Method { get; set; } = "";
            public decimal EstimatedDistance { get; set; }
            public string Icon { get; set; } = "";
            public string Description { get; set; } = "";
            public bool IsRecommended { get; set; }
            public string SustainabilityImpact { get; set; } = "";
            public string Color { get; set; } = "";
        }

        /// <summary>
        /// Ki·ªÉm tra xem qu·ªëc gia c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
        /// </summary>
        public static bool IsCountrySupported(string? productionCountry)
        {
            if (string.IsNullOrEmpty(productionCountry))
                return false;

            var country = productionCountry.Trim();
            
            // Try exact match first
            if (SupportedCountries.ContainsKey(country))
                return true;

            // Try case-insensitive match
            var countryLower = country.ToLower();
            return SupportedCountries.Keys.Any(k => k.ToLower() == countryLower);
        }

        /// <summary>
        /// L·∫•y danh s√°ch 12 qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£
        /// </summary>
        public static List<string> GetSupportedCountries()
        {
            return SupportedCountries.Keys.ToList();
        }

        /// <summary>
        /// T·ª± ƒë·ªông t√≠nh kho·∫£ng c√°ch v·∫≠n chuy·ªÉn t·ª´ n∆∞·ªõc s·∫£n xu·∫•t ƒë·∫øn Vietnam (ch·ªâ cho 12 n∆∞·ªõc h·ªó tr·ª£)
        /// </summary>
        public static decimal CalculateTransportDistance(string? productionCountry)
        {
            if (string.IsNullOrEmpty(productionCountry))
                return 0;

            var country = productionCountry.Trim();
            
            // Try exact match first
            if (SupportedCountries.TryGetValue(country, out var countryInfo))
                return countryInfo.Distance;

            // Try case-insensitive match
            var countryLower = country.ToLower();
            var match = SupportedCountries.FirstOrDefault(kvp => 
                kvp.Key.ToLower() == countryLower);
            
            if (!string.IsNullOrEmpty(match.Key))
                return match.Value.Distance;

            // Unsupported country - throw exception or return error
            throw new ArgumentException($"Qu·ªëc gia '{productionCountry}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£: {string.Join(", ", GetSupportedCountries())}");
        }

        /// <summary>
        /// L·∫•y t·∫•t c·∫£ ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn c√≥ s·∫µn cho m·ªôt qu·ªëc gia
        /// </summary>
        public static List<TransportOverrideOption> GetAvailableTransportMethods(string? productionCountry)
        {
            if (string.IsNullOrEmpty(productionCountry))
                return new List<TransportOverrideOption>();

            var country = productionCountry.Trim();
            
            // Try exact match first
            if (SupportedCountries.TryGetValue(country, out var countryInfo))
            {
                return countryInfo.AvailableTransportMethods.Select(tm => new TransportOverrideOption
                {
                    Method = tm.Method,
                    EstimatedDistance = tm.Distance,
                    Icon = tm.Icon,
                    Description = tm.Description,
                    IsRecommended = tm.IsRecommended,
                    SustainabilityImpact = GetSustainabilityImpact(tm.Distance, tm.Method),
                    Color = GetMethodColor(tm.Method)
                }).ToList();
            }

            // Try case-insensitive match
            var countryLower = country.ToLower();
            var match = SupportedCountries.FirstOrDefault(kvp => 
                kvp.Key.ToLower() == countryLower);
            
            if (!string.IsNullOrEmpty(match.Key))
            {
                return match.Value.AvailableTransportMethods.Select(tm => new TransportOverrideOption
                {
                    Method = tm.Method,
                    EstimatedDistance = tm.Distance,
                    Icon = tm.Icon,
                    Description = tm.Description,
                    IsRecommended = tm.IsRecommended,
                    SustainabilityImpact = GetSustainabilityImpact(tm.Distance, tm.Method),
                    Color = GetMethodColor(tm.Method)
                }).ToList();
            }

            return new List<TransportOverrideOption>();
        }

        /// <summary>
        /// T·ª± ƒë·ªông ƒë·ªÅ xu·∫•t ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn d·ª±a tr√™n qu·ªëc gia (l·∫•y ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c ƒë√°nh d·∫•u recommended)
        /// </summary>
        public static string GetRecommendedTransportMethod(string? productionCountry)
        {
            if (string.IsNullOrEmpty(productionCountry))
                return "Land";

            var country = productionCountry.Trim();
            
            // Try exact match first
            if (SupportedCountries.TryGetValue(country, out var countryInfo))
            {
                var recommended = countryInfo.AvailableTransportMethods.FirstOrDefault(tm => tm.IsRecommended);
                return recommended?.Method ?? "Sea";
            }

            // Try case-insensitive match
            var countryLower = country.ToLower();
            var match = SupportedCountries.FirstOrDefault(kvp => 
                kvp.Key.ToLower() == countryLower);
            
            if (!string.IsNullOrEmpty(match.Key))
            {
                var recommended = match.Value.AvailableTransportMethods.FirstOrDefault(tm => tm.IsRecommended);
                return recommended?.Method ?? "Sea";
            }

            return "Sea"; // fallback
        }

        /// <summary>
        /// T·ª± ƒë·ªông ƒë·ªÅ xu·∫•t ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn d·ª±a tr√™n kho·∫£ng c√°ch (legacy method ƒë·ªÉ backward compatibility)
        /// </summary>
        public static string GetRecommendedTransportMethod(decimal distance)
        {
            if (distance <= 500) return "Land";
            if (distance <= 1000) return "Land";
            if (distance <= 2000) return "Land";
            if (distance <= 5000) return "Sea";
            return "Sea";
        }

        /// <summary>
        /// T√≠nh to√°n th√¥ng tin v·∫≠n chuy·ªÉn cho material creation request v·ªõi h·ªó tr·ª£ override
        /// </summary>
        public static void CalculateTransportInfo(MaterialCreationFormRequest request)
        {
            // Validate country is supported
            if (!IsCountrySupported(request.ProductionCountry))
            {
                throw new ArgumentException($"Qu·ªëc gia '{request.ProductionCountry}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£: {string.Join(", ", GetSupportedCountries())}");
            }

            // N·∫øu supplier ƒë√£ ch·ªçn transport method, validate n√≥ c√≥ h·ª£p l·ªá kh√¥ng
            if (!string.IsNullOrEmpty(request.TransportMethod))
            {
                var availableMethods = GetAvailableTransportMethods(request.ProductionCountry);
                var selectedMethod = availableMethods.FirstOrDefault(m => 
                    m.Method.Equals(request.TransportMethod, StringComparison.OrdinalIgnoreCase));
                
                if (selectedMethod != null)
                {
                    // Supplier ƒë√£ ch·ªçn method h·ª£p l·ªá - s·ª≠ d·ª•ng distance t∆∞∆°ng ·ª©ng
                    request.TransportDistance = selectedMethod.EstimatedDistance;
                }
                else
                {
                    // Method kh√¥ng h·ª£p l·ªá - throw exception
                    var availableMethodNames = availableMethods.Select(m => m.Method);
                    throw new ArgumentException($"Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn '{request.TransportMethod}' kh√¥ng h·ª£p l·ªá cho qu·ªëc gia '{request.ProductionCountry}'. C√°c ph∆∞∆°ng th·ª©c c√≥ s·∫µn: {string.Join(", ", availableMethodNames)}");
                }
            }
            else
            {
                // Supplier ch∆∞a ch·ªçn method - t·ª± ƒë·ªông ƒë·ªÅ xu·∫•t
                request.TransportMethod = GetRecommendedTransportMethod(request.ProductionCountry);
                
                // T√≠nh distance t∆∞∆°ng ·ª©ng v·ªõi method ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
                var availableMethods = GetAvailableTransportMethods(request.ProductionCountry);
                var recommendedMethod = availableMethods.FirstOrDefault(m => 
                    m.Method.Equals(request.TransportMethod, StringComparison.OrdinalIgnoreCase));
                
                request.TransportDistance = recommendedMethod?.EstimatedDistance ?? CalculateTransportDistance(request.ProductionCountry);
            }
        }

        /// <summary>
        /// L·∫•y danh s√°ch c√°c n∆∞·ªõc s·∫£n xu·∫•t ƒë∆∞·ª£c h·ªó tr·ª£ (thay th·∫ø GetCommonProductionCountries)
        /// </summary>
        public static List<string> GetCommonProductionCountries()
        {
            return GetSupportedCountries().Where(k => k != "Vietnam").ToList();
        }

        /// <summary>
        /// L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ v·∫≠n chuy·ªÉn v·ªõi method ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
        /// </summary>
        public static (decimal distance, string method, string description) GetTransportDetails(string? productionCountry)
        {
            if (!IsCountrySupported(productionCountry))
            {
                throw new ArgumentException($"Qu·ªëc gia '{productionCountry}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£: {string.Join(", ", GetSupportedCountries())}");
            }

            var distance = CalculateTransportDistance(productionCountry);
            var method = GetRecommendedTransportMethod(productionCountry);
            
            var description = method switch
            {
                "Sea" => $"V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn t·ª´ {productionCountry} ({distance}km) - √çt carbon nh·∫•t",
                "Land" => $"V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i t·ª´ {productionCountry} ({distance}km) - Ph√π h·ª£p cho kho·∫£ng c√°ch ng·∫Øn",
                "Rail" => $"V·∫≠n chuy·ªÉn b·∫±ng t√†u h·ªèa t·ª´ {productionCountry} ({distance}km) - Hi·ªáu qu·∫£ cao",
                "Air" => $"V·∫≠n chuy·ªÉn b·∫±ng m√°y bay t·ª´ {productionCountry} ({distance}km) - Nhanh nh·∫•t nh∆∞ng nhi·ªÅu carbon",
                _ => $"V·∫≠n chuy·ªÉn t·ª´ {productionCountry} ({distance}km)"
            };

            return (distance, method, description);
        }

        /// <summary>
        /// L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ v·∫≠n chuy·ªÉn v·ªõi method c·ª• th·ªÉ
        /// </summary>
        public static (decimal distance, string method, string description) GetTransportDetails(string? productionCountry, string transportMethod)
        {
            if (!IsCountrySupported(productionCountry))
            {
                throw new ArgumentException($"Qu·ªëc gia '{productionCountry}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£: {string.Join(", ", GetSupportedCountries())}");
            }

            var availableMethods = GetAvailableTransportMethods(productionCountry);
            var selectedMethod = availableMethods.FirstOrDefault(m => 
                m.Method.Equals(transportMethod, StringComparison.OrdinalIgnoreCase));
            
            if (selectedMethod == null)
            {
                var availableMethodNames = availableMethods.Select(m => m.Method);
                throw new ArgumentException($"Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn '{transportMethod}' kh√¥ng h·ª£p l·ªá cho qu·ªëc gia '{productionCountry}'. C√°c ph∆∞∆°ng th·ª©c c√≥ s·∫µn: {string.Join(", ", availableMethodNames)}");
            }

            return (selectedMethod.EstimatedDistance, selectedMethod.Method, selectedMethod.Description);
        }

        /// <summary>
        /// L·∫•y ƒë√°nh gi√° chi ti·∫øt v·ªÅ v·∫≠n chuy·ªÉn
        /// </summary>
        public static object GetTransportEvaluation(decimal distance, string method)
        {
            var distanceCategory = GetDistanceCategory(distance);
            var methodColor = GetMethodColor(method);
            var methodDescription = GetMethodDescription(method);
            var sustainabilityImpact = GetSustainabilityImpact(distance, method);

            return new
            {
                distance = distance,
                method = method,
                distanceCategory = distanceCategory,
                methodColor = methodColor,
                methodDescription = methodDescription,
                sustainabilityImpact = sustainabilityImpact,
                icon = GetMethodIcon(method),
                isRecommended = IsRecommendedMethod(distance, method)
            };
        }

        /// <summary>
        /// L·∫•y ƒë√°nh gi√° chi ti·∫øt v·ªÅ s·∫£n xu·∫•t (cho 12 qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£)
        /// </summary>
        public static object GetProductionEvaluation(string? country)
        {
            if (!IsCountrySupported(country))
            {
                throw new ArgumentException($"Qu·ªëc gia '{country}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c qu·ªëc gia ƒë∆∞·ª£c h·ªó tr·ª£: {string.Join(", ", GetSupportedCountries())}");
            }

            var isDomestic = country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) ?? false;
            var countryInfo = GetCountryInfo(country);

            return new
            {
                country = country,
                flag = countryInfo?.Flag ?? "üåç",
                isDomestic = isDomestic,
                sustainabilityRating = countryInfo?.SustainabilityRating ?? "Unknown",
                description = countryInfo?.Description ?? "Kh√¥ng c√≥ th√¥ng tin",
                category = isDomestic ? "S·∫£n xu·∫•t trong n∆∞·ªõc" : "Nh·∫≠p kh·∫©u",
                categoryColor = isDomestic ? "success" : "warning",
                availableTransportMethods = GetAvailableTransportMethods(country).Count
            };
        }

        /// <summary>
        /// L·∫•y th√¥ng tin qu·ªëc gia
        /// </summary>
        public static CountryTransportInfo? GetCountryInfo(string? country)
        {
            if (string.IsNullOrEmpty(country))
                return null;

            var countryName = country.Trim();
            
            // Try exact match first
            if (SupportedCountries.TryGetValue(countryName, out var countryInfo))
                return countryInfo;

            // Try case-insensitive match
            var countryLower = countryName.ToLower();
            var match = SupportedCountries.FirstOrDefault(kvp => 
                kvp.Key.ToLower() == countryLower);
            
            return !string.IsNullOrEmpty(match.Key) ? match.Value : null;
        }

        private static string GetDistanceCategory(decimal distance)
        {
            if (distance <= 500) return "G·∫ßn";
            if (distance <= 2000) return "Trung b√¨nh";
            if (distance <= 5000) return "Xa";
            return "R·∫•t xa";
        }

        private static string GetMethodColor(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "primary",
                "land" => "success",
                "rail" => "info",
                "air" => "warning",
                _ => "default"
            };
        }

        private static string GetMethodDescription(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t",
                "land" => "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i - Ph√π h·ª£p cho kho·∫£ng c√°ch ng·∫Øn",
                "rail" => "V·∫≠n chuy·ªÉn b·∫±ng t√†u h·ªèa - Hi·ªáu qu·∫£ cao",
                "air" => "V·∫≠n chuy·ªÉn b·∫±ng m√°y bay - Nhanh nh·∫•t nh∆∞ng nhi·ªÅu carbon",
                _ => "Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn kh√¥ng x√°c ƒë·ªãnh"
            };
        }

        private static string GetMethodIcon(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "DirectionsBoat",
                "land" => "LocalShipping",
                "rail" => "Train",
                "air" => "Flight",
                _ => "LocalShipping"
            };
        }

        private static bool IsRecommendedMethod(decimal distance, string method)
        {
            var recommended = GetRecommendedTransportMethod(distance);
            return method?.Equals(recommended, StringComparison.OrdinalIgnoreCase) ?? false;
        }

        private static string GetSustainabilityImpact(decimal distance, string method)
        {
            var distanceScore = distance switch
            {
                <= 500 => "T·ªët",
                <= 2000 => "Trung b√¨nh",
                <= 5000 => "Cao",
                _ => "R·∫•t cao"
            };

            var methodScore = method?.ToLower() switch
            {
                "sea" => "T·ªët nh·∫•t",
                "rail" => "T·ªët",
                "land" => "Trung b√¨nh",
                "air" => "Cao nh·∫•t",
                _ => "Kh√¥ng x√°c ƒë·ªãnh"
            };

            return $"{distanceScore} (kho·∫£ng c√°ch) + {methodScore} (ph∆∞∆°ng th·ª©c)";
        }

        private static string GetCountryFlag(string? country)
        {
            var countryInfo = GetCountryInfo(country);
            return countryInfo?.Flag ?? "üåç";
        }

        private static string GetProductionSustainabilityImpact(string? country)
        {
            var countryInfo = GetCountryInfo(country);
            if (countryInfo == null)
                return "Kh√¥ng x√°c ƒë·ªãnh";
                
            return country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) == true
                ? "T·ªët - Gi·∫£m thi·ªÉu carbon footprint"
                : $"{countryInfo.SustainabilityRating} - {countryInfo.Description}";
        }

        private static string GetProductionDescription(string? country)
        {
            var countryInfo = GetCountryInfo(country);
            if (countryInfo == null)
                return $"S·∫£n xu·∫•t t·∫°i {country} - Kh√¥ng c√≥ th√¥ng tin";
                
            return country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) == true
                ? "S·∫£n xu·∫•t trong n∆∞·ªõc - Gi·∫£m thi·ªÉu carbon footprint"
                : $"S·∫£n xu·∫•t t·∫°i {country} - {countryInfo.Description}";
        }
    }
} 