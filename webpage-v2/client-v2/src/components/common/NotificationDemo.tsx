import React, { useState } from "react";
import {
  Box,
  Button,
  Typography,
  Card,
  CardContent,
  Stack,
  Divider,
} from "@mui/material";
import {
  ErrorDisplay,
  SuccessDisplay,
  InfoDisplay,
  useNotification,
} from "./index";
import type { ApiError } from "@/types/apiError";

export const NotificationDemo: React.FC = () => {
  const [inlineError, setInlineError] = useState<ApiError | null>(null);
  const [inlineSuccess, setInlineSuccess] = useState<string | null>(null);
  const [inlineInfo, setInlineInfo] = useState<string | null>(null);

  const notification = useNotification();

  const sampleErrors: ApiError[] = [
    { code: "INVALID_CREDENTIALS", message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" },
    {
      code: "USER_NOT_FOUND",
      message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
    },
    {
      code: "ACCOUNT_LOCKED",
      message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a do nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p sai",
    },
    { code: "INVALID_OTP", message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" },
    { code: "EMAIL_EXISTS", message: "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" },
    {
      code: "VALIDATION_ERROR",
      message: "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p",
    },
    { code: "NETWORK_ERROR", message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß" },
    {
      code: "SERVER_ERROR",
      message: "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau",
    },
  ];

  const sampleSuccessMessages = [
    "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
    "ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!",
    "X√°c th·ª±c email th√†nh c√¥ng!",
    "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!",
    "ƒê·∫∑t h√†ng th√†nh c√¥ng!",
  ];

  const sampleInfoMessages = [
    {
      message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
      severity: "info" as const,
    },
    {
      message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n",
      severity: "info" as const,
    },
    {
      message: "M·∫≠t kh·∫©u n√™n c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
      severity: "warning" as const,
    },
    {
      message: "Phi√™n ƒëƒÉng nh·∫≠p s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t",
      severity: "warning" as const,
    },
  ];

  const showRandomError = (type: "inline" | "snackbar") => {
    const randomError =
      sampleErrors[Math.floor(Math.random() * sampleErrors.length)];
    if (type === "inline") {
      setInlineError(randomError);
    } else {
      notification.showError(randomError);
    }
  };

  const showRandomSuccess = (type: "inline" | "snackbar") => {
    const randomMessage =
      sampleSuccessMessages[
        Math.floor(Math.random() * sampleSuccessMessages.length)
      ];
    if (type === "inline") {
      setInlineSuccess(randomMessage);
    } else {
      notification.showSuccess(randomMessage);
    }
  };

  const showRandomInfo = (type: "inline" | "snackbar") => {
    const randomInfo =
      sampleInfoMessages[Math.floor(Math.random() * sampleInfoMessages.length)];
    if (type === "inline") {
      setInlineInfo(randomInfo.message);
    } else {
      notification.showInfo(randomInfo.message, randomInfo.severity);
    }
  };

  return (
    <Box sx={{ p: 4, maxWidth: 800, mx: "auto" }}>
      <Typography variant="h4" gutterBottom>
        üß™ Notification System Demo
      </Typography>

      <Typography variant="body1" color="text.secondary" mb={4}>
        Test c√°c component hi·ªÉn th·ªã th√¥ng b√°o c·ªßa h·ªá th·ªëng
      </Typography>

      {/* Inline Notifications */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìç Inline Notifications
          </Typography>

          <Stack spacing={2} mb={3}>
            <Button
              variant="outlined"
              color="error"
              onClick={() => showRandomError("inline")}
            >
              Show Random Error
            </Button>
            <Button
              variant="outlined"
              color="success"
              onClick={() => showRandomSuccess("inline")}
            >
              Show Random Success
            </Button>
            <Button
              variant="outlined"
              color="info"
              onClick={() => showRandomInfo("inline")}
            >
              Show Random Info
            </Button>
          </Stack>

          <Divider sx={{ my: 2 }} />

          {/* Display Area */}
          <ErrorDisplay
            error={inlineError}
            onClose={() => setInlineError(null)}
          />
          <SuccessDisplay
            message={inlineSuccess}
            onClose={() => setInlineSuccess(null)}
          />
          <InfoDisplay
            message={inlineInfo}
            onClose={() => setInlineInfo(null)}
          />
        </CardContent>
      </Card>

      {/* Snackbar Notifications */}
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üçû Snackbar Notifications (Global)
          </Typography>

          <Typography variant="body2" color="text.secondary" mb={3}>
            C√°c th√¥ng b√°o n√†y s·∫Ω xu·∫•t hi·ªán ·ªü ƒë·∫ßu m√†n h√¨nh v√† t·ª± ƒë·ªông ·∫©n
          </Typography>

          <Stack spacing={2}>
            <Button
              variant="contained"
              color="error"
              onClick={() => showRandomError("snackbar")}
            >
              Show Global Error
            </Button>
            <Button
              variant="contained"
              color="success"
              onClick={() => showRandomSuccess("snackbar")}
            >
              Show Global Success
            </Button>
            <Button
              variant="contained"
              color="info"
              onClick={() => showRandomInfo("snackbar")}
            >
              Show Global Info
            </Button>
            <Button variant="outlined" onClick={notification.clearAll}>
              Clear All Notifications
            </Button>
          </Stack>
        </CardContent>
      </Card>

      {/* Error Code Reference */}
      <Card sx={{ mt: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìö Error Code Reference
          </Typography>

          <Typography variant="body2" color="text.secondary" mb={2}>
            Danh s√°ch c√°c m√£ l·ªói ƒë∆∞·ª£c h·ªó tr·ª£:
          </Typography>

          <Box
            component="pre"
            sx={{
              fontSize: "0.875rem",
              backgroundColor: "grey.100",
              p: 2,
              borderRadius: 1,
              overflow: "auto",
            }}
          >
            {`
Authentication: INVALID_CREDENTIALS, USER_NOT_FOUND, ACCOUNT_LOCKED, TOKEN_EXPIRED, UNAUTHORIZED
OTP/Verification: INVALID_OTP, OTP_EXPIRED, OTP_LIMIT_EXCEEDED
Registration: EMAIL_EXISTS, USERNAME_EXISTS, PHONE_EXISTS
Validation: VALIDATION_ERROR, REQUIRED_FIELD_MISSING, INVALID_EMAIL_FORMAT, WEAK_PASSWORD
Network/Server: NETWORK_ERROR, SERVER_ERROR, SERVICE_UNAVAILABLE, TIMEOUT
Business Logic: INSUFFICIENT_BALANCE, ORDER_NOT_FOUND, PRODUCT_OUT_OF_STOCK, DISCOUNT_EXPIRED
            `}
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};
