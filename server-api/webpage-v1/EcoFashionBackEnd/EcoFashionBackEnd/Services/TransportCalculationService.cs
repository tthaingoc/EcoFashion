using EcoFashionBackEnd.Common.Payloads.Requests;

namespace EcoFashionBackEnd.Services
{
    public class TransportCalculationService
    {
        // Dictionary of distances from Vietnam to major production countries
        private static readonly Dictionary<string, decimal> CountryDistances = new()
        {
            { "Vietnam", 0 },
            { "China", 1200 },
            { "India", 3500 },
            { "Turkey", 2800 },
            { "Bangladesh", 2500 },
            { "Pakistan", 3200 },
            { "Indonesia", 1800 },
            { "Thailand", 800 },
            { "Malaysia", 1500 },
            { "Philippines", 1200 },
            { "Myanmar", 600 },
            { "Cambodia", 400 },
            { "Laos", 300 },
            { "Singapore", 1400 },
            { "Japan", 3200 },
            { "South Korea", 2800 },
            { "Taiwan", 1800 },
            { "United States", 14000 },
            { "Brazil", 18000 },
            { "Mexico", 16000 },
            { "Egypt", 8000 },
            { "Morocco", 12000 },
            { "Tunisia", 11000 },
            { "Ethiopia", 7000 },
            { "Kenya", 7500 },
            { "Uganda", 7000 },
            { "Tanzania", 7500 },
            { "Madagascar", 6500 },
            { "Mauritius", 6000 },
            { "South Africa", 10000 },
            { "Australia", 6000 },
            { "New Zealand", 8000 }
        };

        // Dictionary of recommended transport methods based on distance
        private static readonly Dictionary<string, string> DistanceTransportMethods = new()
        {
            { "0-500", "Land" },
            { "500-1000", "Land" },
            { "1000-2000", "Land" },
            { "2000-5000", "Sea" },
            { "5000+", "Sea" }
        };

        /// <summary>
        /// T·ª± ƒë·ªông t√≠nh kho·∫£ng c√°ch v·∫≠n chuy·ªÉn t·ª´ n∆∞·ªõc s·∫£n xu·∫•t ƒë·∫øn Vietnam
        /// </summary>
        public static decimal CalculateTransportDistance(string? productionCountry)
        {
            if (string.IsNullOrEmpty(productionCountry))
                return 0;

            var country = productionCountry.Trim();
            
            // Try exact match first
            if (CountryDistances.TryGetValue(country, out var distance))
                return distance;

            // Try case-insensitive match
            var countryLower = country.ToLower();
            var match = CountryDistances.FirstOrDefault(kvp => 
                kvp.Key.ToLower() == countryLower);
            
            if (!string.IsNullOrEmpty(match.Key))
                return match.Value;

            // Default distance for unknown countries
            return 5000;
        }

        /// <summary>
        /// T·ª± ƒë·ªông ƒë·ªÅ xu·∫•t ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn d·ª±a tr√™n kho·∫£ng c√°ch
        /// </summary>
        public static string GetRecommendedTransportMethod(decimal distance)
        {
            if (distance <= 500) return "Land";
            if (distance <= 1000) return "Land";
            if (distance <= 2000) return "Land";
            if (distance <= 5000) return "Sea";
            return "Sea";
        }

        /// <summary>
        /// T√≠nh to√°n th√¥ng tin v·∫≠n chuy·ªÉn cho material creation request
        /// </summary>
        public static void CalculateTransportInfo(MaterialCreationFormRequest request)
        {
            // N·∫øu ch∆∞a c√≥ transport distance, t·ª± ƒë·ªông t√≠nh
            if (request.TransportDistance == null || request.TransportDistance == 0)
            {
                request.TransportDistance = CalculateTransportDistance(request.ProductionCountry);
            }

            // N·∫øu ch∆∞a c√≥ transport method, t·ª± ƒë·ªông ƒë·ªÅ xu·∫•t
            if (string.IsNullOrEmpty(request.TransportMethod))
            {
                request.TransportMethod = GetRecommendedTransportMethod(request.TransportDistance ?? 0);
            }
        }

        /// <summary>
        /// L·∫•y danh s√°ch c√°c n∆∞·ªõc s·∫£n xu·∫•t ph·ªï bi·∫øn
        /// </summary>
        public static List<string> GetCommonProductionCountries()
        {
            return CountryDistances.Keys.Where(k => k != "Vietnam").ToList();
        }

        /// <summary>
        /// L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ v·∫≠n chuy·ªÉn
        /// </summary>
        public static (decimal distance, string method, string description) GetTransportDetails(string? productionCountry)
        {
            var distance = CalculateTransportDistance(productionCountry);
            var method = GetRecommendedTransportMethod(distance);
            
            var description = method switch
            {
                "Sea" => $"V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn t·ª´ {productionCountry} ({distance}km) - √çt carbon nh·∫•t",
                "Land" => $"V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i t·ª´ {productionCountry} ({distance}km) - Ph√π h·ª£p cho kho·∫£ng c√°ch ng·∫Øn",
                "Rail" => $"V·∫≠n chuy·ªÉn b·∫±ng t√†u h·ªèa t·ª´ {productionCountry} ({distance}km) - Hi·ªáu qu·∫£ cao",
                "Air" => $"V·∫≠n chuy·ªÉn b·∫±ng m√°y bay t·ª´ {productionCountry} ({distance}km) - Nhanh nh·∫•t nh∆∞ng nhi·ªÅu carbon",
                _ => $"V·∫≠n chuy·ªÉn t·ª´ {productionCountry} ({distance}km)"
            };

            return (distance, method, description);
        }

        /// <summary>
        /// L·∫•y ƒë√°nh gi√° chi ti·∫øt v·ªÅ v·∫≠n chuy·ªÉn
        /// </summary>
        public static object GetTransportEvaluation(decimal distance, string method)
        {
            var distanceCategory = GetDistanceCategory(distance);
            var methodColor = GetMethodColor(method);
            var methodDescription = GetMethodDescription(method);
            var sustainabilityImpact = GetSustainabilityImpact(distance, method);

            return new
            {
                distance = distance,
                method = method,
                distanceCategory = distanceCategory,
                methodColor = methodColor,
                methodDescription = methodDescription,
                sustainabilityImpact = sustainabilityImpact,
                icon = GetMethodIcon(method),
                isRecommended = IsRecommendedMethod(distance, method)
            };
        }

        /// <summary>
        /// L·∫•y ƒë√°nh gi√° chi ti·∫øt v·ªÅ s·∫£n xu·∫•t
        /// </summary>
        public static object GetProductionEvaluation(string country)
        {
            var isDomestic = country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) ?? false;
            var flag = GetCountryFlag(country);
            var sustainabilityImpact = GetProductionSustainabilityImpact(country);
            var description = GetProductionDescription(country);

            return new
            {
                country = country,
                flag = flag,
                isDomestic = isDomestic,
                sustainabilityImpact = sustainabilityImpact,
                description = description,
                category = isDomestic ? "S·∫£n xu·∫•t trong n∆∞·ªõc" : "Nh·∫≠p kh·∫©u",
                categoryColor = isDomestic ? "success" : "warning"
            };
        }

        private static string GetDistanceCategory(decimal distance)
        {
            if (distance <= 500) return "G·∫ßn";
            if (distance <= 2000) return "Trung b√¨nh";
            if (distance <= 5000) return "Xa";
            return "R·∫•t xa";
        }

        private static string GetMethodColor(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "primary",
                "land" => "success",
                "rail" => "info",
                "air" => "warning",
                _ => "default"
            };
        }

        private static string GetMethodDescription(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "V·∫≠n chuy·ªÉn b·∫±ng t√†u bi·ªÉn - √çt carbon nh·∫•t",
                "land" => "V·∫≠n chuy·ªÉn b·∫±ng xe t·∫£i - Ph√π h·ª£p cho kho·∫£ng c√°ch ng·∫Øn",
                "rail" => "V·∫≠n chuy·ªÉn b·∫±ng t√†u h·ªèa - Hi·ªáu qu·∫£ cao",
                "air" => "V·∫≠n chuy·ªÉn b·∫±ng m√°y bay - Nhanh nh·∫•t nh∆∞ng nhi·ªÅu carbon",
                _ => "Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn kh√¥ng x√°c ƒë·ªãnh"
            };
        }

        private static string GetMethodIcon(string method)
        {
            return method?.ToLower() switch
            {
                "sea" => "DirectionsBoat",
                "land" => "LocalShipping",
                "rail" => "Train",
                "air" => "Flight",
                _ => "LocalShipping"
            };
        }

        private static bool IsRecommendedMethod(decimal distance, string method)
        {
            var recommended = GetRecommendedTransportMethod(distance);
            return method?.Equals(recommended, StringComparison.OrdinalIgnoreCase) ?? false;
        }

        private static string GetSustainabilityImpact(decimal distance, string method)
        {
            var distanceScore = distance switch
            {
                <= 500 => "T·ªët",
                <= 2000 => "Trung b√¨nh",
                <= 5000 => "Cao",
                _ => "R·∫•t cao"
            };

            var methodScore = method?.ToLower() switch
            {
                "sea" => "T·ªët nh·∫•t",
                "rail" => "T·ªët",
                "land" => "Trung b√¨nh",
                "air" => "Cao nh·∫•t",
                _ => "Kh√¥ng x√°c ƒë·ªãnh"
            };

            return $"{distanceScore} (kho·∫£ng c√°ch) + {methodScore} (ph∆∞∆°ng th·ª©c)";
        }

        private static string GetCountryFlag(string? country)
        {
            var flags = new Dictionary<string, string>
            {
                { "Vietnam", "üáªüá≥" },
                { "China", "üá®üá≥" },
                { "India", "üáÆüá≥" },
                { "Turkey", "üáπüá∑" },
                { "Bangladesh", "üáßüá©" },
                { "Pakistan", "üáµüá∞" },
                { "Indonesia", "üáÆüá©" },
                { "Thailand", "üáπüá≠" },
                { "Malaysia", "üá≤üáæ" },
                { "Philippines", "üáµüá≠" },
                { "Myanmar", "üá≤üá≤" },
                { "Cambodia", "üá∞üá≠" },
                { "Laos", "üá±üá¶" },
                { "Singapore", "üá∏üá¨" },
                { "Japan", "üáØüáµ" },
                { "South Korea", "üá∞üá∑" },
                { "Taiwan", "üáπüáº" },
                { "United States", "üá∫üá∏" },
                { "Brazil", "üáßüá∑" },
                { "Mexico", "üá≤üáΩ" },
                { "Egypt", "üá™üá¨" },
                { "Morocco", "üá≤üá¶" },
                { "Tunisia", "üáπüá≥" },
                { "Ethiopia", "üá™üáπ" },
                { "Kenya", "üá∞üá™" },
                { "Uganda", "üá∫üá¨" },
                { "Tanzania", "üáπüáø" },
                { "Madagascar", "üá≤üá¨" },
                { "Mauritius", "üá≤üá∫" },
                { "South Africa", "üáøüá¶" },
                { "Australia", "üá¶üá∫" },
                { "New Zealand", "üá≥üáø" }
            };

            return flags.TryGetValue(country ?? "", out var flag) ? flag : "üåç";
        }

        private static string GetProductionSustainabilityImpact(string? country)
        {
            return country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) == true
                ? "T·ªët - Gi·∫£m thi·ªÉu carbon footprint"
                : "C√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn sustainability score";
        }

        private static string GetProductionDescription(string? country)
        {
            return country?.Equals("Vietnam", StringComparison.OrdinalIgnoreCase) == true
                ? "S·∫£n xu·∫•t trong n∆∞·ªõc - Gi·∫£m thi·ªÉu carbon footprint"
                : $"S·∫£n xu·∫•t t·∫°i {country} - C√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn sustainability score";
        }
    }
} 