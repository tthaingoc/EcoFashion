// <auto-generated />
using System;
using EcoFashionBackEnd.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoFashionBackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250728130832_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIdentificationVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetRoleId")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("TargetRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DesignsMaterial", b =>
                {
                    b.Property<int>("DesignId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("MeterUsed")
                        .HasColumnType("int");

                    b.Property<float>("PersentageUsed")
                        .HasColumnType("real");

                    b.HasKey("DesignId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DesignsMaterials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.Property<int>("DesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignId"));

                    b.Property<string>("CareInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductScore")
                        .HasColumnType("int");

                    b.Property<float>("RecycledPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignId");

                    b.HasIndex("DesignTypeId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<bool>("Durable")
                        .HasColumnType("bit");

                    b.Property<bool>("EthicallyManufactured")
                        .HasColumnType("bit");

                    b.Property<bool>("LowImpactDyes")
                        .HasColumnType("bit");

                    b.Property<bool>("ReduceWaste")
                        .HasColumnType("bit");

                    b.HasKey("FeatureId");

                    b.HasIndex("DesignId")
                        .IsUnique();

                    b.ToTable("DesignFeatures");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignImage", b =>
                {
                    b.Property<int>("DesignImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignImageId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("DesignImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("DesignId", "ImageId")
                        .IsUnique();

                    b.ToTable("DesignImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignTypeSizeRatio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DesignTypeId")
                        .HasColumnType("int");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("DesignTypeId", "SizeId")
                        .IsUnique();

                    b.ToTable("DesignTypeSizeRatios");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Designer", b =>
                {
                    b.Property<Guid>("DesignerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DesignerId");

                    b.HasIndex("UserId");

                    b.ToTable("Designer");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignerMaterialInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastBuyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DesignerMaterialInventories");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DesignsColors");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsRating", b =>
                {
                    b.Property<int>("DesignIdPk")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("UserIdPk")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<float>("RatingScore")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DesignIdPk", "UserIdPk");

                    b.HasIndex("DesignId");

                    b.ToTable("DesignsRating");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SizeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DesignsSizes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsType", b =>
                {
                    b.Property<int>("DesignTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignTypeId"));

                    b.Property<string>("DesignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignTypeId");

                    b.ToTable("DesignsTypes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CarbonFootprint")
                        .HasColumnType("real");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<float>("WasteDiverted")
                        .HasColumnType("real");

                    b.Property<float>("WaterUsage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.HasIndex("DesignId", "SizeId", "ColorId")
                        .IsUnique();

                    b.ToTable("DesignsVariants");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftPart", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("PartId");

                    b.HasIndex("DesignId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DraftParts");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftSketch", b =>
                {
                    b.Property<int>("SketchImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SketchImageId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("SketchImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("DesignId", "ImageId")
                        .IsUnique();

                    b.ToTable("DraftSketches");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.EcoFashionBackEnd.Entities.MaterialImage", b =>
                {
                    b.Property<int>("MaterialImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialImageId"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("MaterialImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CarbonFootprint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarbonFootprintUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CertificationExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturingProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductionCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<decimal>("RecycledPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WasteDiverted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WasteDivertedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WaterUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaterUsageUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialSustainability", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CriterionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MaterialId", "CriterionId");

                    b.HasIndex("CriterionId");

                    b.ToTable("MaterialSustainabilitys");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecycled")
                        .HasColumnType("bit");

                    b.Property<string>("SustainabilityNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialTypeBenchmark", b =>
                {
                    b.Property<int>("BenchmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenchmarkId"));

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BenchmarkId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("TypeId");

                    b.ToTable("MaterialTypeBenchmarks");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.SustainabilityCriteria", b =>
                {
                    b.Property<int>("CriterionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriterionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thresholds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CriterionId");

                    b.ToTable("Sustainability_Criteria");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTPCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("OTPExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("SavedSupplier", b =>
                {
                    b.Property<Guid>("SavedSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SavedSupplierId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Saved_Supplier");
                });

            modelBuilder.Entity("Application", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("TargetRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesignsMaterial", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Designs")
                        .WithMany("DesignsMaterials")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Materials")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designs");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.DesignsType", "DesignTypes")
                        .WithMany()
                        .HasForeignKey("DesignTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "DesignerProfile")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignTypes");

                    b.Navigation("DesignerProfile");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignFeature", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithOne("DesignsFeature")
                        .HasForeignKey("EcoFashionBackEnd.Entities.DesignFeature", "DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignImage", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DesignImages")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignTypeSizeRatio", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.DesignsType", "DesignType")
                        .WithMany("TypeSizeRatios")
                        .HasForeignKey("DesignTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.DesignsSize", "Size")
                        .WithMany("TypeSizeRatios")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignType");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Designer", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignerMaterialInventory", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designer");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsRating", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DesignsRatings")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsVariant", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.DesignsColor", "DesignsColor")
                        .WithMany("Variants")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DesignsVariants")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.DesignsSize", "DesignsSize")
                        .WithMany("Variants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("DesignsColor");

                    b.Navigation("DesignsSize");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftPart", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DraftParts")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftSketch", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DraftSketches")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.EcoFashionBackEnd.Entities.MaterialImage", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany("MaterialImages")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialSustainability", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.SustainabilityCriteria", "SustainabilityCriterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany("MaterialSustainabilityMetrics")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SustainabilityCriterion");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialTypeBenchmark", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.SustainabilityCriteria", "SustainabilityCriteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("SustainabilityCriteria");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Supplier", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.User", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("SavedSupplier", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Designer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.Navigation("DesignImages");

                    b.Navigation("DesignsFeature")
                        .IsRequired();

                    b.Navigation("DesignsMaterials");

                    b.Navigation("DesignsRatings");

                    b.Navigation("DesignsVariants");

                    b.Navigation("DraftParts");

                    b.Navigation("DraftSketches");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsColor", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsSize", b =>
                {
                    b.Navigation("TypeSizeRatios");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsType", b =>
                {
                    b.Navigation("TypeSizeRatios");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.Navigation("MaterialImages");

                    b.Navigation("MaterialSustainabilityMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
