// <auto-generated />
using System;
using EcoFashionBackEnd.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcoFashionBackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004033453_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Certificates")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("text");

                    b.Property<bool>("IsIdentificationVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationId");

                    b.HasIndex("TargetRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DesignsMaterial", b =>
                {
                    b.Property<int>("DesignId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<decimal>("MeterUsed")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DesignId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DesignsMaterials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("BlogId");

                    b.HasIndex("UserID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.BlogImage", b =>
                {
                    b.Property<int>("BlogImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogImageId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.HasKey("BlogImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("BlogId", "ImageId")
                        .IsUnique();

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("UserId", "IsActive")
                        .IsUnique()
                        .HasFilter("\"UserId\" IS NOT NULL AND \"IsActive\" = true");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartItemId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPriceSnapshot")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CartItemId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("CartId", "MaterialId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CheckoutSession", b =>
                {
                    b.Property<Guid>("CheckoutSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.Property<int>("TotalProviders")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CheckoutSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckoutSessions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CheckoutSessionItem", b =>
                {
                    b.Property<int>("CheckoutSessionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckoutSessionItemId"));

                    b.Property<Guid>("CheckoutSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderType")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("CheckoutSessionItemId");

                    b.HasIndex("CheckoutSessionId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CheckoutSessionItems");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.Property<int>("DesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DesignId"));

                    b.Property<float?>("CarbonFootprint")
                        .HasColumnType("real");

                    b.Property<string>("CareInstruction")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LaborCostPerHour")
                        .HasColumnType("numeric");

                    b.Property<float?>("LaborHours")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductScore")
                        .HasColumnType("integer");

                    b.Property<float>("RecycledPercentage")
                        .HasColumnType("real");

                    b.Property<decimal?>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<float?>("WasteDiverted")
                        .HasColumnType("real");

                    b.Property<float?>("WaterUsage")
                        .HasColumnType("real");

                    b.HasKey("DesignId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<bool>("Durable")
                        .HasColumnType("boolean");

                    b.Property<bool>("EthicallyManufactured")
                        .HasColumnType("boolean");

                    b.Property<bool>("LowImpactDyes")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReduceWaste")
                        .HasColumnType("boolean");

                    b.HasKey("FeatureId");

                    b.HasIndex("DesignId")
                        .IsUnique();

                    b.ToTable("DesignFeatures");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignImage", b =>
                {
                    b.Property<int>("DesignImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DesignImageId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.HasKey("DesignImageId");

                    b.HasIndex("DesignId");

                    b.HasIndex("ImageId");

                    b.ToTable("DesignImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Designer", b =>
                {
                    b.Property<Guid>("DesignerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Certificates")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DesignerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("DesignerId");

                    b.HasIndex("UserId");

                    b.ToTable("Designer");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignerMaterialInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("LastBuyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DesignerMaterialInventories");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.HasIndex("SizeId");

                    b.ToTable("DesignsVariants");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftPart", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PartId");

                    b.HasIndex("DesignId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DraftParts");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftSketch", b =>
                {
                    b.Property<int>("SketchImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SketchImageId"));

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.HasKey("SketchImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("DesignId", "ImageId")
                        .IsUnique();

                    b.ToTable("DraftSketches");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ItemTypeSizeRatio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("ItemTypeId", "SizeId")
                        .IsUnique();

                    b.ToTable("ItemTypeSizeRatios");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("AdminNote")
                        .HasColumnType("text");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("text");

                    b.Property<decimal?>("CarbonFootprint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarbonFootprintUnit")
                        .HasColumnType("text");

                    b.Property<string>("CertificationDetails")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CertificationExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManufacturingProcess")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductionCountry")
                        .HasColumnType("text");

                    b.Property<string>("ProductionRegion")
                        .HasColumnType("text");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<decimal>("RecycledPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TransportDistance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransportMethod")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WasteDiverted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WasteDivertedUnit")
                        .HasColumnType("text");

                    b.Property<decimal?>("WaterUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaterUsageUnit")
                        .HasColumnType("text");

                    b.HasKey("MaterialId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialImage", b =>
                {
                    b.Property<int>("MaterialImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaterialImageId"));

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.HasKey("MaterialImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialInventoryTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("AfterQty")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BeforeQty")
                        .HasColumnType("numeric");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PerformedByUserId")
                        .HasColumnType("integer");

                    b.Property<decimal>("QuantityChanged")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("MaterialInventoryTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialStock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinThreshold")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<decimal>("QuantityOnHand")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("StockId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("MaterialId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("MaterialStocks");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialStockTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("AfterQty")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BeforeQty")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<decimal>("QuantityChange")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("MaterialId", "WarehouseId", "CreatedAt");

                    b.ToTable("MaterialStockTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialSustainability", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("CriterionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("MaterialId", "CriterionId");

                    b.HasIndex("CriterionId");

                    b.ToTable("MaterialSustainabilitys");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrganic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecycled")
                        .HasColumnType("boolean");

                    b.Property<string>("SustainabilityNotes")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialTypeBenchmark", b =>
                {
                    b.Property<int>("BenchmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BenchmarkId"));

                    b.Property<int>("CriteriaId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("BenchmarkId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("TypeId");

                    b.ToTable("MaterialTypeBenchmarks");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RelatedId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelatedType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<Guid?>("CheckoutSessionId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CommissionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CommissionRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FulfillmentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OrderGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderType")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CheckoutSessionId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("OrderGroupId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("DesignId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DesignId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderGroup", b =>
                {
                    b.Property<Guid>("OrderGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CompletedOrders")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderGroups");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderSellerSettlement", b =>
                {
                    b.Property<Guid>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CommissionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CommissionRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SellerType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SellerUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("SettlementId");

                    b.HasIndex("OrderId", "SellerUserId")
                        .IsUnique();

                    b.ToTable("OrderSellerSettlements");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("BankCode")
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpnPayload")
                        .HasColumnType("text");

                    b.Property<string>("MerchantCode")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PayUrl")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<string>("ReturnPayload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TxnRef")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VnPayResponseCode")
                        .HasColumnType("text");

                    b.Property<string>("VnPayTransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TxnRef")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DesignId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("DesignId");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.HasIndex("SizeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ProductInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ProductInventoryTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("AfterQty")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BeforeQty")
                        .HasColumnType("numeric");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("PerformedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityChanged")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TransactionId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("ProductInventoryTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RatingScore")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SizeId"));

                    b.Property<string>("SizeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Certificates")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureBack")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationPictureFront")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioFiles")
                        .HasColumnType("text");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<string>("SpecializationUrl")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.SustainabilityCriteria", b =>
                {
                    b.Property<int>("CriterionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CriterionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Thresholds")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("CriterionId");

                    b.ToTable("Sustainability_Criteria");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OTPCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime?>("OTPExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.UserAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("PersonalPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = true");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WalletId"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderGroupId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PaymentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SettlementId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTransactionId");

                    b.HasIndex("WalletId");

                    b.HasIndex("OrderId", "SettlementId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("WarehouseType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("SavedSupplier", b =>
                {
                    b.Property<Guid>("SavedSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("SavedSupplierId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Saved_Supplier");
                });

            modelBuilder.Entity("Application", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("TargetRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesignsMaterial", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Designs")
                        .WithMany("DesignsMaterials")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Materials")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designs");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Blog", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.BlogImage", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Cart", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CartItem", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("EcoFashionBackEnd.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CheckoutSession", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CheckoutSessionItem", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.CheckoutSession", "CheckoutSession")
                        .WithMany("Items")
                        .HasForeignKey("CheckoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId");

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("EcoFashionBackEnd.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("CheckoutSession");

                    b.Navigation("Designer");

                    b.Navigation("Material");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "DesignerProfile")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.ItemType", "ItemTypes")
                        .WithMany("Designs")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DesignerProfile");

                    b.Navigation("ItemTypes");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignFeature", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithOne("DesignFeatures")
                        .HasForeignKey("EcoFashionBackEnd.Entities.DesignFeature", "DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignImage", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DesignImages")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Designer", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignerMaterialInventory", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Warehouse", "Warehouse")
                        .WithMany("MaterialInventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignsVariant", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DesignsVariants")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Size", "Size")
                        .WithMany("Variants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftPart", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DraftParts")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DraftSketch", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("DraftSketches")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ItemTypeSizeRatio", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.ItemType", "ItemType")
                        .WithMany("TypeSizeRatios")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Size", "Size")
                        .WithMany("TypeSizeRatios")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialImage", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany("MaterialImages")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialInventoryTransaction", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.DesignerMaterialInventory", "MaterialInventory")
                        .WithMany("MaterialInventoryTransactions")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId");

                    b.Navigation("MaterialInventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialStock", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialStockTransaction", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialSustainability", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.SustainabilityCriteria", "SustainabilityCriterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany("MaterialSustainabilityMetrics")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SustainabilityCriterion");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.MaterialTypeBenchmark", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.SustainabilityCriteria", "SustainabilityCriteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("SustainabilityCriteria");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Notification", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Order", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.CheckoutSession", "CheckoutSession")
                        .WithMany("Orders")
                        .HasForeignKey("CheckoutSessionId");

                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId");

                    b.HasOne("EcoFashionBackEnd.Entities.OrderGroup", "OrderGroup")
                        .WithMany("Orders")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckoutSession");

                    b.Navigation("Designer");

                    b.Navigation("OrderGroup");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderDetail", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany()
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcoFashionBackEnd.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Design");

                    b.Navigation("Designer");

                    b.Navigation("Material");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderGroup", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderSellerSettlement", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Order", "Order")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Product", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Design", "Design")
                        .WithMany("Products")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ProductInventory", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.Warehouse", "Warehouse")
                        .WithMany("ProductInventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ProductInventoryTransaction", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.ProductInventory", "ProductInventory")
                        .WithMany("ProductInventoryTransaction")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductInventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Review", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EcoFashionBackEnd.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Supplier", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.User", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.UserAddress", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Wallet", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("EcoFashionBackEnd.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.WalletTransaction", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.PaymentTransaction", "PaymentTransaction")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("PaymentTransactionId");

                    b.HasOne("EcoFashionBackEnd.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentTransaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Warehouse", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany("Warehouses")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("SavedSupplier", b =>
                {
                    b.HasOne("EcoFashionBackEnd.Entities.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcoFashionBackEnd.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Designer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Blog", b =>
                {
                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.CheckoutSession", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Design", b =>
                {
                    b.Navigation("DesignFeatures")
                        .IsRequired();

                    b.Navigation("DesignImages");

                    b.Navigation("DesignsMaterials");

                    b.Navigation("DesignsVariants");

                    b.Navigation("DraftParts");

                    b.Navigation("DraftSketches");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Designer", b =>
                {
                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.DesignerMaterialInventory", b =>
                {
                    b.Navigation("MaterialInventoryTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ItemType", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("TypeSizeRatios");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Material", b =>
                {
                    b.Navigation("MaterialImages");

                    b.Navigation("MaterialSustainabilityMetrics");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.OrderGroup", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.PaymentTransaction", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Product", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.ProductInventory", b =>
                {
                    b.Navigation("ProductInventoryTransaction");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Size", b =>
                {
                    b.Navigation("TypeSizeRatios");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("EcoFashionBackEnd.Entities.Warehouse", b =>
                {
                    b.Navigation("MaterialInventories");

                    b.Navigation("ProductInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
