What changed:
CheckoutService.CreateSessionAsync:
Idempotency now reuses multiple pending orders for the same CheckoutSessionId and returns them in CreateSessionResponse.Orders.
Normalizes items, determines seller per item (SupplierId for materials, DesignerId for products/designs).
Groups items by seller and creates one Order per group with corresponding OrderDetail rows.
Sets Order.SupplierId/DesignerId and ProviderType, attaches to a new OrderGroup, and returns all created orders in the response.
CheckoutController unchanged in contracts; existing endpoints will now return many orders when cart is mixed.
How to use (shopeed-style):
FE calls POST /api/Checkout/create-session or create-session-from-cart.
Response now includes a single orderGroupId and orders: CheckoutOrderDto[] (one per seller). Pay each order or pay group via the existing wallet group endpoint.
Note:
If you want per-seller shipping fees, add logic where groupShipping is computed.

Back-end đã build được hỗ trợ xem front end cần chỉnh sửa gì để áp dụng được.
Những điểm cần chỉnh trên frontend để áp dụng pre-split (nhiều Order)
Thay đổi tạo session ngay khi vào trang thanh toán
Ở pages/checkout/CheckoutTailwind.tsx:
Trong bootstrap (useEffect đầu vào), thay vì chỉ lưu selectedCartItems và đợi lúc bấm Thanh toán mới gọi API, hãy gọi checkoutService.createSession(...) ngay với danh sách item đã chọn.
Sau khi nhận CreateSessionResponse trả về orderGroupId và orders[], gọi wizard.start(response) để khởi tạo wizard nhiều đơn.
Chuyển nút Thanh toán sang “trả cả nhóm” theo orderGroupId
Ở CheckoutTailwind.tsx:
Thay vì: tạo session rồi payWithWallet cho orders[0], hãy gọi payGroupWithWallet({ orderGroupId: wizard.orderGroupId, addressId }) để thanh toán tất cả orders trong group 1 lần.
Nếu muốn “trả từng đơn”, thêm UI chọn đơn hiện tại và gọi payWithWallet({ orderId, addressId }) từng order.
Cập nhật kiểm tra số dư ví theo tổng của nhóm
Ở CheckoutTailwind.tsx: thay orderTotal (đang là tổng của selectedCartItems) bằng tổng wizard.orders (cộng các totalAmount của tất cả orders trong group) để cảnh báo ví không đủ chính xác cho thanh toán nhóm.
Cập nhật địa chỉ giao hàng theo nhóm
Khi thanh toán nhóm: gọi API cập nhật địa chỉ nhóm PUT /api/Checkout/order-group/{orderGroupId}/address (FE có thể thêm hàm gọi nếu chưa có).
Nếu thanh toán từng order: giữ API PUT /api/Checkout/order/{orderId}/address.
Điều hướng trang kết quả thanh toán
Ở pages/checkout/CheckoutResultTailwind.tsx:
Ngoài orderId, cần hỗ trợ query orderGroupId (khi thanh toán nhóm).
Nếu có orderGroupId, hiển thị trạng thái theo nhóm (có thể đơn giản: “Thanh toán nhóm thành công” và chuyển sang Orders). Không cần fetch từng order ngay tại trang này.
Nút/luồng “Trả nhóm” đã sẵn
CheckoutTailwind.tsx đã có handlePayGroup và hook usePayGroupWithWallet. Chỉ cần dùng nó làm flow chính thay vì flow “pay first order”.
Đồng bộ Orders page
Vì backend giờ tạo nhiều Order (mỗi seller một order), trang danh sách đơn sẽ tự thấy nhiều dòng. Không cần gọi Sub-Order API.
Nếu muốn UX giống Shopee, có thể hiển thị badge “Group: {orderGroupId}” hoặc gộp/nhóm theo orderGroupId (tùy bạn, không bắt buộc).
Không cần gọi các endpoint Sub-Order
FE không cần thêm hay giữ bất kỳ gọi nào đến Sub-Order; logic seller/khách theo Order độc lập.
Kiểm tra các điểm này khớp BE
checkoutService.createSession (FE) đã đúng interface: orders: CheckoutOrderDto[].
Dùng payGroupWithWallet khi muốn trả nhóm; payWithWallet cho trả lẻ từng order.
Khi redirect sau thanh toán nhóm: dùng ?orderGroupId=... thay vì ?orderId=....
Gợi ý thứ tự làm nhanh:
1) CheckoutTailwind.tsx: gọi createSession trong bootstrap → wizard.start(resp); tổng tiền = sum qua wizard.orders.
2) Đổi nút Thanh toán sang gọi payGroupWithWallet với wizard.orderGroupId.
3) CheckoutResultTailwind.tsx: nhận và xử lý orderGroupId.
4) Optional: hiển thị group trên Orders page (nếu muốn).

>Chưa rõ ràng lắm : app tôi có 2 role bán hàng được là supplier và designer. 
Trường hợp 1 : người mua mua hàng của supplier/designer --> sau khi thanh toán thành công --> supplier/designer đó có thể xác nhận, vận chuyển , hoàn thành đơn hàng
Trường hợp 2 : người mua mua hàng từ đa nguồn càn áp dụng pre-split thành nhiều order
Backend của chúng ta có thể cover hết các test case này không ?
Sau khi thanh toán thành công sẽ hiện thông tin orders người mua đó đã đặt và không có tạo 2 lần orders 
Trả lời ngắn gọn
Backend đã cover đầy đủ 2 case:
Case 1 (1 nguồn: supplier hoặc designer): create-session tạo 1 Order; sau khi thanh toán, seller đó có thể Confirm/Ship/Deliver qua các endpoint hiện có.
Case 2 (đa nguồn): create-session pre-split theo seller → tạo N Order trong cùng 1 OrderGroup; có thể thanh toán 1 lần (pay-group) hoặc từng order; mỗi order vận hành độc lập (Confirm/Ship/Deliver).
Không tạo trùng Order:
Đã có idempotency bằng CheckoutSessionId. FE gửi idempotencyKey vào create-session, BE sẽ “reuse” các Order PENDING tồn tại (trả lại đúng danh sách Order cũ) thay vì tạo mới.
Payment (cả đơn lẻ và nhóm) chỉ cập nhật trạng thái, không tạo thêm Order.
Liên kết với các hành động cụ thể
Tạo session:
Mixed cart → BE trả về orderGroupId + orders[] (mỗi seller 1 order).
Single seller → BE trả về 1 phần tử trong orders[].
Thanh toán:
Nhóm: POST /api/Checkout/pay-group-with-wallet (orderGroupId).
Lẻ: POST /api/Checkout/pay-with-wallet (orderId).
Địa chỉ:
Nhóm: PUT /api/Checkout/order-group/{orderGroupId}/address.
Lẻ: PUT /api/Checkout/order/{orderId}/address.
Vận hành seller:
Lấy đơn theo seller: đã có service lấy orders by sellerId.
Cập nhật trạng thái: PATCH /order/{orderId}/fulfillment-status, POST /order/{orderId}/ship, POST /order/{orderId}/deliver.
Lưu ý để tránh trùng đơn và hiển thị đúng
FE luôn gửi idempotencyKey khi gọi create-session. Nếu user thao tác lại, BE sẽ trả danh sách những Order PENDING cũ (không tạo mới).
Sau thanh toán:
Có thể dùng ngay danh sách orders[] đã có từ create-session để hiển thị, hoặc
Fetch danh sách đơn của user (trang Orders), đều không tạo thêm đơn.
Nếu bạn muốn, tôi có thể chỉ ra đúng chỗ trong FE cần chỉnh (đã tóm tắt ở bước trước: gọi create-session sớm, dùng pay-group, tổng tiền = sum orders, kết quả dùng orderGroupId).