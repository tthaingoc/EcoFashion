import { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { ordersService } from '../../services/api/ordersService';
import { shipmentService, ShipmentTrackingResponse } from '../../services/api/shipmentService';
import { formatViDateTime } from '../../utils/date';
import { paymentsService } from '../../services/api/paymentsService';
import { Button, Box, Chip, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';
import { LocalShipping, Visibility, AccessTime, CheckCircle, Store } from '@mui/icons-material';

export default function OrdersDetails() {
  const navigate = useNavigate();
  const [payLoading, setPayLoading] = useState(false);
  const [payError, setPayError] = useState<string | null>(null);
  
  const handlePayWithWallet = async () => {
    setPayLoading(true);
    setPayError(null);
    try {
      // V·ªõi logic idempotency: chuy·ªÉn th·∫≥ng v·ªÅ trang checkout ti√™u chu·∫©n
      // Trang CheckoutTailwind s·∫Ω d√πng orderId ƒë·ªÉ load ƒë∆°n v√† thanh to√°n b·∫±ng v√≠
      navigate(`/checkout?orderId=${data.orderId}`);
    } catch (e: any) {
      setPayError(e?.message || 'Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang thanh to√°n');
    } finally {
      setPayLoading(false);
    }
  };
  
  const { orderId } = useParams();
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [details, setDetails] = useState<any[]>([]);
  const [showTrackingDialog, setShowTrackingDialog] = useState(false);
  const [trackingInfo, setTrackingInfo] = useState<ShipmentTrackingResponse | null>(null);
  const [trackingLoading, setTrackingLoading] = useState(false);
  const [trackingError, setTrackingError] = useState<string | null>(null);

  useEffect(() => {
    const load = async () => {
      try {
        setLoading(true);
        if (!orderId) return;
        const res = await ordersService.getById(Number(orderId));
        setData((res as any)?.result || res);
        const lines = await ordersService.getDetailsByOrderId(Number(orderId));
        setDetails(lines);
      } catch (e: any) {
        setError(e?.message || 'Kh√¥ng t·∫£i ƒë∆∞·ª£c chi ti·∫øt ƒë∆°n');
      } finally {
        setLoading(false);
      }
    };
    load();
  }, [orderId]);

  // Function to handle tracking click based on order status
  const handleTrackingClick = async () => {
    const isPaid = data.paymentStatus === 'Paid' || data.paymentStatus === 'paid';
    const isProcessing = data.status === 'processing';
    const fulfillmentStatus = data.fulfillmentStatus || 'None';
    
    // If order is paid but fulfillment is None/Processing, show waiting dialog
    if (isPaid && isProcessing && (fulfillmentStatus === 'None' || fulfillmentStatus === 'Processing')) {
      setShowTrackingDialog(true);
    } else {
      // For shipped/delivered orders, load tracking info and show dialog
      try {
        setTrackingLoading(true);
        setTrackingError(null);
        const info = await shipmentService.getTracking(Number(data.orderId));
        setTrackingInfo(info);
      } catch (e: any) {
        setTrackingInfo(null);
        setTrackingError(e?.message || 'Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng tin v·∫≠n chuy·ªÉn');
      } finally {
        setShowTrackingDialog(true);
        setTrackingLoading(false);
      }
    }
  };

  const renderTrackingStatus = () => {
    const isPaid = data.paymentStatus === 'Paid' || data.paymentStatus === 'paid';
    const fulfillmentStatus = data.fulfillmentStatus || 'None';
    
    if (!isPaid) {
      return (
        <div className="font-medium text-gray-500">
          Ch∆∞a thanh to√°n
        </div>
      );
    }
    
    // Map fulfillment status to Vietnamese and colors
    const getStatusInfo = (status: string) => {
      switch (status.toLowerCase()) {
        case 'delivered':
          return { text: '‚úÖ ƒê√£ giao h√†ng', color: '#16a34a', bgColor: '#dcfce7' };
        case 'shipped':
          return { text: 'üöö ƒêang v·∫≠n chuy·ªÉn', color: '#7c3aed', bgColor: '#ede9fe' };
        case 'processing':
          return { text: 'üì¶ ƒêang x·ª≠ l√Ω', color: '#2563eb', bgColor: '#dbeafe' };
        case 'none':
        default:
          return { text: '‚è≥ Ch·ªù x√°c nh·∫≠n', color: '#d97706', bgColor: '#fef3c7' };
      }
    };
    
    const statusInfo = getStatusInfo(fulfillmentStatus);
    const showWaitingDialog = fulfillmentStatus === 'None' || fulfillmentStatus === 'Processing';
    
    return (
      <div className="font-medium flex items-center gap-2">
        <span style={{ color: statusInfo.color }}>
          {statusInfo.text}
        </span>
        <Chip
          label={showWaitingDialog ? "Xem ti·∫øn tr√¨nh" : "Theo d√µi v·∫≠n chuy·ªÉn"}
          size="small"
          icon={showWaitingDialog ? <AccessTime /> : <LocalShipping />}
          onClick={handleTrackingClick}
          sx={{ 
            bgcolor: statusInfo.bgColor, 
            color: statusInfo.color,
            cursor: 'pointer',
            '&:hover': { 
              bgcolor: statusInfo.bgColor,
              opacity: 0.8
            }
          }}
        />
      </div>
    );
  };

  if (loading) return <div className="max-w-[1120px] mx-auto p-6">ƒêang t·∫£i chi ti·∫øt ƒë∆°n...</div>;
  if (error) return <div className="max-w-[1120px] mx-auto p-6 text-red-600">{error}</div>;
  if (!data) return null;
  // No more x1000 multiplier since backend has correct VND prices
  const subtotal = details.reduce((s, d) => s + Number(d.unitPrice || 0) * Number(d.quantity || 0), 0);
  const shipping = Number((data as any).shippingFee ?? 0);
  const discount = Number((data as any).discount ?? 0);
  const total = Number((data as any).totalPrice ?? (subtotal + shipping - discount));

  return (
    <div className="max-w-[1120px] mx-auto px-4 py-6 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">ƒê∆°n #{data.orderId}</h1>
        <div className="flex items-center gap-3">
          <button
            onClick={() => {
              if (orderId && !loading) {
                const load = async () => {
                  try {
                    setLoading(true);
                    const res = await ordersService.getById(Number(orderId));
                    setData((res as any)?.result || res);
                    const lines = await ordersService.getDetailsByOrderId(Number(orderId));
                    setDetails(lines);
                  } catch (e: any) {
                    setError(e?.message || 'Kh√¥ng t·∫£i ƒë∆∞·ª£c chi ti·∫øt ƒë∆°n');
                  } finally {
                    setLoading(false);
                  }
                };
                load();
              }
            }}
            disabled={loading}
            className="text-blue-600 hover:text-blue-700 disabled:opacity-50 text-sm"
          >
            {loading ? 'üîÑ ƒêang t·∫£i...' : 'üîÑ L√†m m·ªõi'}
          </button>
          <Link to="/orders" className="text-green-700 hover:underline">Danh s√°ch ƒë∆°n</Link>
        </div>
      </div>
      <div className="bg-white border rounded-md p-4 grid md:grid-cols-3 gap-4">
        <div>
          <div className="text-sm text-gray-500">Tr·∫°ng th√°i</div>
          <div className="font-medium">{String(data.status)}</div>
        </div>
        <div>
          <div className="text-sm text-gray-500">Thanh to√°n</div>
          <div className="font-medium">{String(data.paymentStatus || 'Pending')}</div>
        </div>
        <div>
          <div className="text-sm text-gray-500">T·ªïng ti·ªÅn</div>
          <div className="font-semibold text-green-700">{Number(data.totalPrice || 0).toLocaleString('vi-VN')} ‚Ç´</div>
        </div>
        <div>
          <div className="text-sm text-gray-500">Tr·∫°ng th√°i v·∫≠n chuy·ªÉn</div>
          {renderTrackingStatus()}
        </div>
        <div>
          <div className="text-sm text-gray-500">Ng√†y ƒë·∫∑t</div>
          <div className="font-medium">{(data as any).orderDate ? formatViDateTime((data as any).orderDate) : '-'}</div>
        </div>
      </div>

      <div className="bg-white border rounded-md">
        <div className="px-4 py-3 border-b font-medium">S·∫£n ph·∫©m</div>
        <div className="divide-y">
          {details.map((d) => (
            <div key={d.orderDetailId} className="px-4 py-3 grid grid-cols-12 items-center gap-3">
              <div className="col-span-2">
                {d.imageUrl ? (
                  <img src={d.imageUrl} alt={d.itemName} className="w-16 h-16 object-cover rounded" />
                ) : (
                  <div className="w-16 h-16 bg-gray-100 rounded" />
                )}
              </div>
              <div className="col-span-4">
                <div className="font-medium">{d.itemName}</div>
                <div className="text-sm text-gray-500">{d.type} ‚Ä¢ NCC/NTK: {d.providerName}</div>
              </div>
              <div className="col-span-2 text-gray-700">{Number(d.unitPrice || 0).toLocaleString('vi-VN')} ‚Ç´</div>
              <div className="col-span-2 text-gray-700">x {d.quantity}</div>
              <div className="col-span-2 font-semibold text-green-700">{(Number(d.unitPrice || 0) * Number(d.quantity || 0)).toLocaleString('vi-VN')} ‚Ç´</div>
            </div>
          ))}
          {details.length === 0 && (
            <div className="p-4 text-gray-500">Ch∆∞a c√≥ d√≤ng h√†ng</div>
          )}
        </div>
      </div>

      <div className="bg-white border rounded-md p-4 grid md:grid-cols-2 gap-4">
        <div className="text-sm text-gray-600">T·ªïng s·ªë d√≤ng: <b>{details.length}</b></div>
        <div className="space-y-2 text-right">
          <div>T·∫°m t√≠nh: <b>{subtotal.toLocaleString('vi-VN')} ‚Ç´</b></div>
          <div>Ph√≠ v·∫≠n chuy·ªÉn: <b>{shipping.toLocaleString('vi-VN')} ‚Ç´</b></div>
          <div>Gi·∫£m gi√°: <b>-{discount.toLocaleString('vi-VN')} ‚Ç´</b></div>
          <div className="text-lg font-semibold text-green-700">T·ªïng c·ªông: {total.toLocaleString('vi-VN')} ‚Ç´</div>
          {(String(data.paymentStatus).toLowerCase() !== 'paid' && String(data.paymentStatus).toLowerCase() !== 'success') && (
            <button
              className="mt-4 px-4 py-2 bg-green-600 text-white rounded font-semibold hover:bg-green-700 disabled:opacity-60"
              onClick={handlePayWithWallet}
              disabled={payLoading}
            >
              {payLoading ? 'ƒêang chuy·ªÉn...' : 'Thanh to√°n b·∫±ng v√≠'}
            </button>
          )}
          {payError && <div className="text-red-600 mt-2">{payError}</div>}
        </div>
      </div>

      {/* Tracking Status Dialog */}
      <Dialog 
        open={showTrackingDialog} 
        onClose={() => setShowTrackingDialog(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          {(['shipped','delivered'].includes(String(data.fulfillmentStatus || '').toLowerCase()))
            ? <LocalShipping sx={{ color: '#7c3aed' }} />
            : <AccessTime sx={{ color: '#d97706' }} />}
          Tr·∫°ng th√°i ƒë∆°n h√†ng #{data.orderId}
        </DialogTitle>
        <DialogContent>
          <div className="space-y-6 py-4">
            {/* Waiting/Processing content */}
            {(String(data.fulfillmentStatus || 'None').toLowerCase() === 'none' || String(data.fulfillmentStatus || 'None').toLowerCase() === 'processing') && (
              <>
                <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <div className="w-8 h-8 bg-amber-500 rounded-full flex items-center justify-center">
                      <AccessTime sx={{ color: 'white', fontSize: 16 }} />
                    </div>
                    <div>
                      <div className="font-semibold text-amber-800">Ch·ªù ng∆∞·ªùi b√°n x√°c nh·∫≠n</div>
                      <div className="text-sm text-amber-600">ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† ƒëang ch·ªù ng∆∞·ªùi b√°n x√°c nh·∫≠n</div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                      <CheckCircle sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-green-700">ƒê√£ thanh to√°n</div>
                      <div className="text-sm text-gray-600">Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng</div>
                    </div>
                  </div>

                  <div className="flex items-center gap-4">
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                      data.fulfillmentStatus === 'Processing' 
                        ? 'bg-blue-500' 
                        : 'bg-amber-500'
                    }`}>
                      <AccessTime sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className={`font-medium ${
                        data.fulfillmentStatus === 'Processing' 
                          ? 'text-blue-700' 
                          : 'text-amber-700'
                      }`}>
                        {data.fulfillmentStatus === 'Processing' 
                          ? 'ƒêang x·ª≠ l√Ω' 
                          : 'Ch·ªù x√°c nh·∫≠n t·ª´ ng∆∞·ªùi b√°n'
                        }
                      </div>
                      <div className="text-sm text-gray-600">
                        {data.fulfillmentStatus === 'Processing' 
                          ? 'Ng∆∞·ªùi b√°n ƒëang chu·∫©n b·ªã v√† ƒë√≥ng g√≥i ƒë∆°n h√†ng c·ªßa b·∫°n'
                          : 'Ng∆∞·ªùi b√°n ƒëang xem x√©t v√† chu·∫©n b·ªã ƒë∆°n h√†ng c·ªßa b·∫°n'
                        }
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-4 opacity-40">
                    <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                      <LocalShipping sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-gray-500">V·∫≠n chuy·ªÉn</div>
                      <div className="text-sm text-gray-400">ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c v·∫≠n chuy·ªÉn sau khi ng∆∞·ªùi b√°n x√°c nh·∫≠n</div>
                    </div>
                  </div>

                  <div className="flex items-center gap-4 opacity-40">
                    <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                      <CheckCircle sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-gray-500">Ho√†n th√†nh</div>
                      <div className="text-sm text-gray-400">ƒê∆°n h√†ng ƒë∆∞·ª£c giao th√†nh c√¥ng</div>
                    </div>
                  </div>
                </div>

                {details.length > 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <Store sx={{ color: '#3b82f6' }} />
                      <span className="font-medium text-blue-800">Th√¥ng tin ng∆∞·ªùi b√°n</span>
                    </div>
                    <div className="space-y-1">
                      {[...new Set(details.map(d => d.providerName).filter(Boolean))].map((providerName, idx) => (
                        <div key={idx} className="text-sm text-blue-700">
                          ‚Ä¢ {providerName}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="bg-gray-50 border rounded-lg p-4">
                  <div className="font-medium text-gray-800 mb-2">Th·ªùi gian d·ª± ki·∫øn</div>
                  <div className="text-sm text-gray-600">
                    ‚Ä¢ X√°c nh·∫≠n t·ª´ ng∆∞·ªùi b√°n: 1-2 ng√†y l√†m vi·ªác<br/>
                    ‚Ä¢ V·∫≠n chuy·ªÉn: 3-7 ng√†y l√†m vi·ªác<br/>
                    ‚Ä¢ T·ªïng th·ªùi gian: 4-9 ng√†y l√†m vi·ªác
                  </div>
                </div>
              </>
            )}

            {/* Tracking info for Shipped/Delivered */}
            {(String(data.fulfillmentStatus || '').toLowerCase() === 'shipped' || String(data.fulfillmentStatus || '').toLowerCase() === 'delivered') && (
              <div className="space-y-4">
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                      {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 
                        <CheckCircle sx={{ color: 'white', fontSize: 16 }} /> :
                        <LocalShipping sx={{ color: 'white', fontSize: 16 }} />
                      }
                    </div>
                    <div>
                      <div className="font-semibold text-purple-800">{String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 'ƒê√£ giao h√†ng' : 'ƒêang v·∫≠n chuy·ªÉn'}</div>
                      <div className="text-sm text-purple-600">
                        {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 
                          'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng' :
                          'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn ƒë·∫øn ƒë·ªãa ch·ªâ c·ªßa b·∫°n'
                        }
                      </div>
                    </div>
                  </div>
                </div>

                {/* Progress Timeline */}
                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                      <CheckCircle sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-green-700">ƒê√£ thanh to√°n</div>
                      <div className="text-sm text-gray-600">Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng</div>
                    </div>
                  </div>

                  <div className="flex items-center gap-4">
                    <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                      <CheckCircle sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-green-700">ƒêang x·ª≠ l√Ω</div>
                      <div className="text-sm text-gray-600">Ng∆∞·ªùi b√°n ƒëang chu·∫©n b·ªã v√† ƒë√≥ng g√≥i ƒë∆°n h√†ng c·ªßa b·∫°n</div>
                    </div>
                  </div>

                  <div className={`flex items-center gap-4 ${String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? '' : ''}`}>
                    <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center">
                      <LocalShipping sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-purple-700">ƒêang v·∫≠n chuy·ªÉn</div>
                      <div className="text-sm text-gray-600">
                        {trackingInfo ? 
                          `M√£ v·∫≠n ƒë∆°n: ${trackingInfo.trackingNumber || 'ƒêang c·∫≠p nh·∫≠t'} ‚Ä¢ ${trackingInfo.carrier || 'V·∫≠n chuy·ªÉn ti√™u chu·∫©n'}` :
                          'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn b·ªüi ƒë·ªëi t√°c v·∫≠n chuy·ªÉn'
                        }
                      </div>
                      {trackingInfo?.estimatedDelivery && (
                        <div className="text-xs text-purple-600">D·ª± ki·∫øn giao: {new Date(trackingInfo.estimatedDelivery).toLocaleDateString('vi-VN')}</div>
                      )}
                      {trackingInfo?.currentLocation && (
                        <div className="text-xs text-gray-500">V·ªã tr√≠: {trackingInfo.currentLocation}</div>
                      )}
                    </div>
                  </div>

                  <div className={`flex items-center gap-4 ${String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? '' : 'opacity-40'}`}>
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                      String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 'bg-green-500' : 'bg-gray-300'
                    }`}>
                      <CheckCircle sx={{ color: 'white', fontSize: 14 }} />
                    </div>
                    <div className="flex-1">
                      <div className={`font-medium ${
                        String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 'text-green-700' : 'text-gray-500'
                      }`}>
                        Ho√†n th√†nh
                      </div>
                      <div className={`text-sm ${
                        String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 'text-gray-600' : 'text-gray-400'
                      }`}>
                        {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 
                          'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng v√† k√≠ch ho·∫°t thanh to√°n cho ng∆∞·ªùi b√°n' :
                          'ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh sau khi giao th√†nh c√¥ng'
                        }
                      </div>
                      {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' && (
                        <div className="text-xs text-green-600">Giao th√†nh c√¥ng l√∫c: {formatViDateTime(data.orderDate)}</div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Seller Info */}
                {details.length > 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <Store sx={{ color: '#3b82f6' }} />
                      <span className="font-medium text-blue-800">Th√¥ng tin ng∆∞·ªùi b√°n</span>
                    </div>
                    <div className="space-y-1">
                      {[...new Set(details.map(d => d.providerName).filter(Boolean))].map((providerName, idx) => (
                        <div key={idx} className="text-sm text-blue-700">
                          ‚Ä¢ {providerName}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Estimated Time Info */}
                <div className="bg-gray-50 border rounded-lg p-4">
                  <div className="font-medium text-gray-800 mb-2">
                    {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? 'Th·ªùi gian ho√†n th√†nh' : 'Th·ªùi gian d·ª± ki·∫øn'}
                  </div>
                  <div className="text-sm text-gray-600">
                    {String(data.fulfillmentStatus || '').toLowerCase() === 'delivered' ? (
                      <>
                        ‚Ä¢ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng<br/>
                        ‚Ä¢ Thanh to√°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi b√°n<br/>
                        ‚Ä¢ C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i EcoFashion
                      </>
                    ) : (
                      <>
                        ‚Ä¢ V·∫≠n chuy·ªÉn: 2-5 ng√†y l√†m vi·ªác<br/>
                        ‚Ä¢ Giao h√†ng trong khu v·ª±c n·ªôi th√†nh<br/>
                        ‚Ä¢ Li√™n h·ªá hotline n·∫øu c·∫ßn h·ªó tr·ª£
                      </>
                    )}
                  </div>
                </div>

                {/* Loading and Error States */}
                {trackingLoading && (
                  <div className="text-center py-4">
                    <div className="text-sm text-gray-600">ƒêang t·∫£i th√¥ng tin v·∫≠n chuy·ªÉn chi ti·∫øt...</div>
                  </div>
                )}

                {trackingError && (
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="text-sm text-orange-800">
                      <strong>L∆∞u √Ω:</strong> Kh√¥ng th·ªÉ t·∫£i th√¥ng tin v·∫≠n chuy·ªÉn chi ti·∫øt. ƒê∆°n h√†ng v·∫´n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω b√¨nh th∆∞·ªùng.
                    </div>
                  </div>
                )}

                {/* Tracking History (if available) */}
                {trackingInfo && Array.isArray(trackingInfo.statusHistory) && trackingInfo.statusHistory.length > 0 && (
                  <div className="bg-white border rounded-lg">
                    <div className="px-4 py-3 border-b font-medium">L·ªãch s·ª≠ v·∫≠n chuy·ªÉn chi ti·∫øt</div>
                    <div className="divide-y">
                      {trackingInfo.statusHistory.map((h, idx) => (
                        <div key={idx} className="px-4 py-3 flex items-start gap-3">
                          <div className="w-2 h-2 mt-2 rounded-full bg-purple-500" />
                          <div className="flex-1">
                            <div className="text-sm font-medium text-gray-900">{h.status}</div>
                            <div className="text-sm text-gray-600">{h.description}</div>
                            <div className="text-xs text-gray-500">{new Date(h.timestamp).toLocaleString('vi-VN')} ‚Ä¢ {h.location}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowTrackingDialog(false)} color="primary">
            ƒê√£ hi·ªÉu
          </Button>
        </DialogActions>
      </Dialog>

    </div>
  );
}


