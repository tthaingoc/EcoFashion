ServiceExtensions.cs
ExceptionMiddleware.cs
WalletService.cs

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Asking1: "Xem giúp luồng back-end hiện tại từ cart - orders - payment , phân tích giúp mình kiến trúc có phải là đang cho thanh toán với 1 đơn hàng và trả bằng vnpay không ? Nếu mình muốn áp dụng thanh toán 1 đơn gồm nhiều sellers khác nhau ví dụ 2 supplier bán Material , và 1 designer bán product trên cùng 1 hóa đơn thì làm sao và làm sao để chia tiền vì giờ mình đã có ví rồi (Sẽ trả tiền thông qua ví ). Làm sao để chia hoa hồng cho system wallet - mỗi user đang có 1 ví -- admin wallet là system wallet . Mình muốn chia ví dụ theo món hàng Material là Premium Organic Cotton Fabric là customer trả thông qua ví : 10 m vải giá 850000 (tiền này ví user -850000 , ví admin +850000 sau đó ví admin trả cho supplier (theo userId)-- (chia số tiền này ra 10% admin 90% supplier đó) )"
Response1:
Kiểm tra luồng hiện tại (cart → order → payment)
Đúng: Hệ thống đang thanh toán “một đơn hàng” qua VNPay (direct). CheckoutService tạo session từ cart; PaymentService sinh VNPay URL và khi callback thành công thì hoàn tất đơn (giảm tồn kho, cập nhật trạng thái).
Đã có SellerId/SellerType ở từng cart item (theo ghi chú trước), nhưng thanh toán hiện đang gộp “toàn bộ” đơn.
Bạn muốn: một đơn có nhiều seller, trả qua ví và chia hoa hồng
Mục tiêu:
Khách trả tổng tiền qua ví.
Admin wallet nhận tiền, giữ lại hoa hồng 10%, còn lại là khoản phải trả cho từng seller (supplier/designer).
Khi giao hàng hoàn tất (delivered), hệ thống trả tiền cho seller từ ví admin.
Kiến trúc gợi ý (áp dụng mượt với code hiện có)
Dữ liệu:
Giữ đơn “một hóa đơn” (không tách sub-order), nhưng “group theo seller” ở mức tính tiền:
Thuộc tính trên OrderItem: SellerId, SellerType, CommissionRate (vd 10%), CommissionAmount, NetPayoutAmount.
Hoặc một bảng breakdown: OrderSellerSettlement (orderId, sellerId, grossAmount, commissionAmount, netAmount, status).
Bảng (hoặc entity) “Payout”/“Settlement”:
PayoutEntry: OrderId, SellerId, SellerType, Gross, Commission, Net, Status (Pending → Released → Cancelled), ReleasedAt.
Ví:
Customer wallet: 1 giao dịch Payment = −Tổng tiền order.
Admin wallet: 1 giao dịch Deposit = +Tổng tiền order.
Payout cho seller: ghi nhận ở PayoutEntry (chưa đụng seller wallet).
Khi Delivered: chuyển tiền từ admin → seller (Withdrawal ở admin, Deposit ở seller) với số tiền net (90%). Commission 10% được admin giữ mặc định.
Luồng thanh toán “wallet-first” + VNPay fallback
1) Tại checkout:
FE gọi GET /wallet/balance để xem số dư.
Nếu đủ: gọi API PayWithWallet(orderId) (mới) để trừ ví và tạo các PayoutEntry.
Nếu thiếu: đề xuất nạp thêm qua /wallet/deposit số tiền chênh lệch → VNPay callback xong, FE gọi PayWithWallet(orderId).
2) PayWithWallet(orderId):
Backend gom các items theo SellerId/SellerType, tính:
sellerGross = sum(itemPrice*qty)
commission = sellerGross * rate (vd 10%)
net = sellerGross − commission
Trong 1 transaction:
Trừ tiền customer.wallet (WalletTransaction Type=Payment, BalanceBefore/After).
Cộng admin.wallet (Type=Deposit).
Tạo PayoutEntry per seller: Pending.
Gắn PaymentTransaction/Order status = Paid (by Wallet).
Idempotent: nếu order đã Paid, bỏ qua.
3) Khi fulfillment = Delivered:
Backend (cron/manual/admin endpoint) gọi ReleasePayouts(orderId):
Với mỗi PayoutEntry Pending: tạo 2 wallet Txn:
Admin Withdrawal (−net), Seller Deposit (+net).
Cập nhật PayoutEntry = Released.
4) Refund/cancel:
Nếu chưa Released: đảo chiều Payment (admin → customer).
Nếu đã Released: sinh “negative payout” (seller → admin) hoặc yêu cầu reconcile tùy rule.
Thay đổi tối thiểu cần làm (backend)
API mới:
POST /checkout/pay-with-wallet body: { orderId }
POST /settlements/release?orderId=... (admin/scheduler)
Service:
OrderPaymentService.PayWithWallet(orderId, userId):
Validate số dư; tính breakdown; gọi WalletService ghi giao dịch; tạo PayoutEntry.
SettlementService.ReleasePayoutsForOrder(orderId):
Chuyển tiền admin → seller; update trạng thái.
Model:
Bổ sung trên OrderItem: SellerId, SellerType, CommissionRate, CommissionAmount, NetPayoutAmount (hoặc lưu ở OrderSellerSettlement).
Entity PayoutEntry (liability), link OrderId, SellerId, amounts, status.
--------------------------------------------------------------------------------------------------
Thay đổi tối thiểu (frontend)
Checkout:
Hiển thị “Thanh toán bằng ví” nếu balance >= orderTotal.
Nếu thiếu: nút “Nạp thêm” → redirect /wallet với returnTo=/checkout?pay=orderId.
Sau khi deposit callback, tự động refetch balance và gọi pay-with-wallet.
React Query:
Queries: ['wallet','summary'], ['orders', orderId].
Mutations: initiateDeposit, payWithWallet.
Invalidate ['wallet'], ['orders', orderId] khi thành công.
Không cần thay đổi lớn UI ví; chỉ thêm UX dẫn dòng “nạp → quay lại thanh toán”.
Ví dụ tính tiền (case của bạn)
10m Premium Organic Cotton Fabric, giá 850,000:
Customer wallet: −850,000 (Payment)
Admin wallet: +850,000 (Deposit)
Commission 10%: 85,000 (admin giữ)
Payout Net 90%: 765,000 cho supplier (Pending)
Khi Delivered: admin → supplier 765,000 (Withdrawal/Deposit)
Lưu ý triển khai
Cấu hình admin wallet: AdminUserId trong config/ENV; đảm bảo ví tồn tại.
Idempotency: chống double pay/callback.
Audit: lưu OrderId/OrderItemId vào WalletTransaction (các cột reference).
Bảo mật: chỉ owner có thể pay-with-wallet; chỉ admin có thể release payouts.
Nếu bạn muốn, mình có thể tạo skeleton:
PayoutEntry entity + DbSet.
OrderPaymentService và SettlementService.
POST /checkout/pay-with-wallet và POST /settlements/release.

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

Asking2 : "Hỗ trợ xem các entities liên quan đến luồng này và phân tích đã đủ entities để thiết kế trả hóa đơn kiểu 1 hóa đơn với nhiều mặt hàng của seller đó , và kiểu 1 hóa đơn với các mặt hàng của nhiều seller khác nhau (ở đây là suppliers và designers) . Mình có cần bổ sung thêm gì không ? Luồng payment hiện tại khi thanh toán xong vì không demo được shipment nên mình setup là call api gọi shippment delivered khi khi payment paid . "
Response2:
I'll scan key backend entities (Order, OrderItem/OrderDetail, Cart, PaymentTransaction) to verify current fields for seller attribution and whether we need PayoutEntry or similar to support multi-seller settlement and commission via wallets.
Listed Entities
Order.cs
OrderDetail.cs
Cart.cs
CartItem.cs
PaymentTransaction.cs
OrderGroup.cs
Supplier.cs
Material.cs
Designer.cs
Product.cs

Đánh giá entities hiện tại cho “1 hóa đơn nhiều seller”
ĐÃ CÓ đủ để nhận diện seller theo từng dòng hàng:
OrderDetail có SupplierId (link Supplier → UserId) và DesignerId (link Designer → UserId) → xác định chính xác ví seller.
Order có PaymentStatus, FulfillmentStatus, OrderGroupId (gộp nhiều order) → hỗ trợ flow nhiều-seller.
PaymentTransaction liên kết Order + User và lưu VNPAY info.
Wallet, WalletTransaction đã có; User → Wallet và Supplier/Designer → UserId giúp tìm ví để chia tiền.
CHƯA PHÙ HỢP nếu muốn chia tiền theo từng seller một cách chuẩn chỉnh:
Order đang có SellerType, SellerId ở cấp-đơn (không phù hợp với multi-seller), nên không dùng field này cho hóa đơn nhiều seller.
Chưa có bảng “settlement/payout” để quản lý tiền phải trả cho mỗi seller, trạng thái chi trả, và liên kết tới giao dịch ví.
Bổ sung tối thiểu cần có
Thêm entity “payout/settlement” theo từng seller trong 1 order:
Gợi ý OrderSellerSettlement:
SettlementId (Guid), OrderId (int), SellerUserId (int), SellerType ('Supplier'|'Designer')
GrossAmount (decimal): tổng tiền seller
CommissionRate (decimal) (vd 0.1), CommissionAmount (decimal), NetAmount (decimal)
Status ('Pending'|'Released'|'Cancelled'), ReleasedAt (DateTime?)
Optional: AdminWalletTxnId, SellerWalletTxnId (để đối soát)
Index duy nhất (OrderId, SellerUserId) để tránh tạo trùng.
DbSet trong AppDbContext + cấu hình quan hệ.
Liên kết giao dịch ví tới order/settlement để audit:
Hiện WalletTransaction có PaymentTransactionId, nhưng không có OrderId/SettlementId.
Gợi ý thêm (optional nhưng nên có): OrderId (int?), SettlementId (Guid?) để lần vết và đối soát.
Luồng đề xuất áp dụng vào hệ thống hiện tại
Pay bằng ví (wallet-first), fallback VNPay nếu thiếu:
Tại checkout, gom OrderDetail theo seller (supplier/designer) → tính Gross, Commission = Gross*rate, Net.
PayWithWallet(orderId) (API mới):
Trừ customer.wallet = −Order.TotalPrice
Cộng admin.wallet = +Order.TotalPrice
Tạo các OrderSellerSettlement (1 dòng/seller) ở trạng thái Pending
Đánh dấu Order.PaymentStatus = Paid
Release payout cho seller:
Bình thường: khi Order.FulfillmentStatus = Delivered thì:
Với mỗi settlement Pending: admin → seller NetAmount
Ghi 2 WalletTransaction: admin Withdrawal (−Net), seller Deposit (+Net), cập nhật Settlement.Status = Released
Bạn đang “giả lập delivered ngay khi paid” để demo shipment:
Có thể gọi ngay service “ReleasePayoutsForOrder(orderId)” sau khi Paid để chi tiền lập tức (phù hợp với demo).
Refund/cancel:
Nếu chưa release: đảo chiều customer/admin và xóa/đặt settlement = Cancelled.
Nếu đã release: tạo “negative settlement” (seller → admin) hoặc quy trình reconcile.
Kết luận “đủ/chưa đủ”
Đủ để nhận diện nhiều seller theo từng dòng hàng (nhờ OrderDetail.SupplierId/DesignerId và mapping tới UserId → Wallet).
Chưa đủ để quản trị chia tiền đa seller vì thiếu “bảng settlement/payout”. Nên bổ sung OrderSellerSettlement (hoặc tên tương đương) + (khuyến nghị) thêm liên kết OrderId/SettlementId vào WalletTransaction để audit.
Gợi ý triển khai nhanh
Entity mới: OrderSellerSettlement + DbSet + migration.
Service mới:
OrderPaymentService.PayWithWallet(orderId, userId) → tạo settlement, ghi ví customer/admin, set Paid.
SettlementService.ReleasePayoutsForOrder(orderId) → chuyển tiền admin → seller theo NetAmount.
Controller mới:
POST /checkout/pay-with-wallet
POST /settlements/release?orderId=... (admin/scheduler), hoặc tự động gọi khi bạn set Delivered ngay sau Paid để phù hợp demo.
Với hiện trạng “mark delivered khi payment paid” để demo shipment, bạn chỉ cần gọi ReleasePayoutsForOrder(orderId) ngay sau khi cập nhật Paid là xong luồng ví + chia hoa hồng 10%/90% theo từng seller.

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

Prepairation : 
Already implemented : 

new OrderSellerSettlement entity, link it in AppDbContext, and extend WalletTransaction with optional OrderId and SettlementId references to support multi-seller payouts.
OrderSellerSettlement.cs
WalletTransaction.cs
AppDbContext.cs
đã thêm các entity/quan hệ cần thiết để hỗ trợ 2 cách trả tiền: thanh toán cả đơn qua VNPay (như đang có) và thanh toán qua ví + chia tiền cho nhiều seller.
Đã bổ sung
OrderSellerSettlement (bảng settlement theo seller)
Dùng làm “bảng phải trả” theo từng seller cho một Order.
Trường: SettlementId, OrderId, SellerUserId, SellerType, GrossAmount, CommissionRate, CommissionAmount, NetAmount, Status (Pending|Released|Cancelled), CreatedAt, ReleasedAt.
Ý nghĩa: Khi khách trả tiền, tạo record Pending cho từng seller (gom từ OrderDetail); khi giao hàng xong (hoặc theo demo: ngay sau Paid), hệ thống chuyển tiền từ ví admin sang ví seller và cập nhật Status=Released.
Mở rộng WalletTransaction
Thêm OrderId?, SettlementId? để lần vết giao dịch ví thuộc order nào và settlement nào.
Ý nghĩa: giúp audit dòng tiền rõ ràng (customer → admin khi trả tiền; admin → seller khi chia tiền).
Cấu hình AppDbContext
Thêm DbSet<OrderSellerSettlement>.
Precision cho các trường tiền tệ/commission; unique index (OrderId, SellerUserId); index cho (OrderId, SettlementId) trong WalletTransaction.
Ý nghĩa: đảm bảo dữ liệu không trùng và truy vấn nhanh.
Cách sử dụng (không cần thêm gì nữa cho data layer)
Khi Pay bằng ví:
Tính tổng theo seller từ OrderDetail (supplier/designer), tạo mỗi seller một OrderSellerSettlement ở trạng thái Pending với Gross, Commission, Net.
Tạo WalletTransaction cho customer (Payment −Total) và admin (Deposit +Total) có OrderId.
Khi Delivered (hoặc theo demo: ngay sau Paid):
Với mỗi settlement Pending: tạo 2 WalletTransaction: admin Withdrawal (−Net, set OrderId/SettlementId), seller Deposit (+Net, set OrderId/SettlementId), set ReleasedAt, Status=Released.
Bạn đã có đủ entity liên quan đến cart → order → orderDetail (seller xác định qua SupplierId/DesignerId và ánh xạ UserId → Wallet). Với bổ sung này, không cần thêm gì nữa ở phần entity để hỗ trợ “một hóa đơn nhiều seller” và chi hoa hồng qua ví.
Thêm OrderSellerSettlement và mở rộng WalletTransaction với OrderId/SettlementId để hỗ trợ settlement/payout đa seller; cập nhật AppDbContext với DbSet, cấu hình precision/indices.



Asking3:"Hiện tại front end đã có UI cho shippment. Mình muốn khi user thanh toán xong hóa đơn vì không demo được shippment mình có cách nào không .. ví dụ seller đó xác nhận đơn hàng khi trạng thái đơn status payment của user đó là paid. Lúc này user sẽ nhận được UI shipment success và đơn đó xác nhận hoàn thành . Lúc này mới chia tiền trong ví 90% cho seller và 10% cho admin" 
Response3:
Let me look at the existing OrderService to attach the new "confirm delivered" and "release payouts" logic cleanly.
Cách đơn giản nhất để demo shipment + chia tiền đúng ý bạn:
Khi PaymentStatus chuyển sang Paid, tự động set FulfillmentStatus = Delivered và gọi settlement release để chia tiền 90% cho seller, 10% giữ lại ở admin.
Gợi ý thay đổi nhỏ (không sửa UI FE):
Tạo một service method ReleasePayoutsForOrder(orderId):
Gom OrderDetail theo seller → tính Gross, Commission=10%, Net=90%.
Tạo OrderSellerSettlement Pending (nếu chưa có).
Thực hiện ví: admin Withdrawal (−Net, set OrderId/SettlementId), seller Deposit (+Net, set OrderId/SettlementId).
Set Settlement.Status=Released và cập nhật ReleasedAt.
Gọi release khi đơn Paid:
Ngay tại nơi đặt PaymentStatus=Paid (PaymentService/VNPay callback) hoặc trong OrderService logic auto-fix bạn đang có:
Sau khi set FulfillmentStatus=Delivered → gọi ReleasePayoutsForOrder(orderId).
Với demo: điều này mô phỏng “seller xác nhận” ngay khi khách thanh toán.
Lợi ích
FE thấy “shipment success” vì FulfillmentStatus=Delivered.
Tiền được chia ngay theo tỷ lệ 90/10, ghi giao dịch ví rõ ràng theo OrderId/SettlementId.
Không cần thay FE, chỉ cần backend trigger tại thời điểm phù hợp.
Nếu bạn muốn, mình sẽ thêm phương thức SettlementService.ReleasePayoutsForOrder(orderId) và chèn gọi nó sau khi PaymentStatus=Paid.
 
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

Asking4: "My bro-pro AI xin hãy giúp mình xem file Wallet-Cart-Orders-Payment-Shipment.txt . người anh em thiện lành này đã đi đến Asking 3 . bro xem giúp mình tóm tắt lại những thứ cần phải thay đổi để có thể nạp tiền vào ví user + tiền ; rút tiền khỏi ví user trừ tiền; Khi Thanh toán xong là + tiền vào ví admin, khi nào hoàn tất đơn hàng thì mới chia bằng 2 cách : 1 . Trả hóa đơn cho theo nhóm từng seller (cụ thể ở đây là supplier và designer). 2. Có thể ghép hóa đơn để trả (user gộp đơn tổng) "
Response4:
Tóm tắt thay đổi cần làm để hoàn thiện luồng ví + thanh toán + chia tiền
1) Nạp tiền và rút tiền (wallet)
Backend đã có: POST /wallet/deposit, GET /wallet/deposit/callback, POST /wallet/withdrawal/request, POST /wallet/withdrawal, GET /wallet/withdrawal/callback. Trong WalletService.cs tôi đã sửa:
Nạp: tạo WalletTransaction đúng WalletId, cập nhật BalanceBefore/After, update ví khi VNPay trả về 00.
Rút: kiểm tra đúng TransactionType.Withdrawal, không set Success trước callback, cập nhật ví + giao dịch sau callback.
Cần đảm bảo config:
Xác định AdminUserId (ví admin) từ config để dùng về sau.
Commission mặc định (vd 10%) từ config.
2) Khi thanh toán xong đơn: cộng tiền vào ví admin
Cần 1 API/method mới: PayWithWallet(orderId) (nếu dùng ví để trả)
Trừ customer.wallet = −Order.Total
Cộng admin.wallet = +Order.Total
Tạo breakdown per-seller dưới dạng settlement (xem mục 3)
Set Order.PaymentStatus = Paid, gắn WalletTransaction.OrderId
Nếu vẫn dùng VNPay để trả đơn hàng:
Sau VNPay callback thành công cho order: xử lý tương tự như trên (coi như “nạp vào admin rồi đánh dấu Paid”): admin.wallet += total, tạo settlements, set Paid.
3) Chia tiền khi đơn hoàn tất (Delivered) – 2 cách
ĐÃ THÊM entity: OrderSellerSettlement và link vào AppDbContext
Dùng làm “bảng phải trả” theo từng seller: OrderId, SellerUserId, SellerType, Gross, CommissionRate, CommissionAmount, Net, Status (Pending|Released|Cancelled).
ĐÃ MỞ RỘNG WalletTransaction: thêm OrderId?, SettlementId? để audit.
Cần thêm Service/Endpoints:
Tạo settlement (per-seller):
SettlementService.CreateSettlementsForOrder(orderId, commissionRate):
Gom OrderDetail theo seller (supplier/designer → UserId) → tính Gross, Commission, Net → tạo OrderSellerSettlement(Pending) nếu chưa có.
Release payout:
SettlementService.ReleasePayoutsForOrder(orderId):
Với từng settlement Pending: admin.wallet Withdrawal (−Net, set OrderId/SettlementId), seller.wallet Deposit (+Net, set OrderId/SettlementId), set Released.
Trigger release:
Với demo shipment: sau khi set Order.PaymentStatus = Paid, set luôn FulfillmentStatus = Delivered và gọi ReleasePayoutsForOrder(orderId) để UI shipment “thành công” và tiền chia ngay.
Cách (1) Trả hóa đơn theo nhóm từng seller trong 1 order: dùng chính OrderSellerSettlement (mỗi seller một settlement).
Cách (2) Ghép nhiều đơn (user gộp đơn tổng) để trả:
Dùng OrderGroup (đã có) → thêm PayGroupWithWallet(orderGroupId):
Tương tự PayWithWallet nhưng tổng theo tất cả Orders trong group:
Trừ ví khách theo tổng group, cộng ví admin; tạo settlements cho từng order/seller; set các order Paid.
ReleasePayoutsForGroup(orderGroupId) để release đồng loạt (hoặc gọi trên từng order).
4) Controller endpoints cần bổ sung
POST /checkout/pay-with-wallet body { orderId } → gọi OrderPaymentService.PayWithWallet.
POST /checkout/pay-group-with-wallet body { orderGroupId } (nếu dùng gộp).
POST /settlements/release?orderId=... và /settlements/release-group?orderGroupId=... (dùng cho demo hoặc batch job).
Ở nơi set PaymentStatus=Paid (VNPay callback hoặc wallet): gọi SettlementService.CreateSettlementsForOrder(orderId, commissionRate); với demo shipment, set FulfillmentStatus=Delivered rồi ReleasePayoutsForOrder(orderId).
5) FE tích hợp tối thiểu (nếu cần)
Checkout:
Nút “Thanh toán bằng ví” → call pay-with-wallet; nếu số dư thiếu: điều hướng nạp tiền rồi quay lại checkout gọi tiếp pay-with-wallet.
Không cần đổi UI shipment: backend sẽ set Delivered sau khi Paid để FE hiển thị “shipment success”.
6) Quy tắc/khuyến nghị
Idempotency: PayWithWallet/VNPay callback/release phải kiểm tra trạng thái tránh lặp.
Commission đọc từ config, có thể ghi log trên settlement.
Tất cả WalletTransaction liên quan đặt OrderId/SettlementId để đối soát.
Những thay đổi chính bạn chưa có và cần implement: OrderPaymentService.PayWithWallet, SettlementService.CreateSettlementsForOrder, SettlementService.ReleasePayoutsForOrder (+ các route gọi chúng). Các entity/DbContext cần thiết đã có sẵn.

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Gợi ý cải thiện FE cho ví (ngắn gọn, áp dụng dần)
TanStack Query (react-query): quản lý data wallet/summary, transactions, và mutation nạp/rút; cache + tự động refetch sau callback VNPay.
Cache keys: ['wallet','summary'], ['wallet','transactions', page, pageSize]
Sau khi nạp thành công: queryClient.invalidateQueries({queryKey:['wallet']})
Custom hooks: gom API + query/mutation, UI gọi hook, code gọn và dễ test.
useWalletSummary(), useWalletTransactions(p, s), useInitiateDeposit(), useRequestWithdraw()
Zod + react-hook-form: validate form nạp/rút (số tiền min/max, bội số, mô tả).
Hiện bạn đang validate thủ công; dùng schema -> lỗi hiển thị nhất quán, ít bug.
UI/UX:
Loading skeletons cho phần số dư và lịch sử.
Chặn double-submit (disable nút, pending state).
Toast cho lỗi API (dựa vào interceptor đã có).
“Xem tất cả giao dịch” → trang riêng có phân trang vô hạn (infinite query) hoặc pagination.
Đồng bộ callback VNPay:
Ở WalletPage, sau khi detect vnp_*, gọi queryClient.invalidateQueries(['wallet']) để cập nhật số dư/tóm tắt.
Không cần call backend callback nữa vì VNPay đã gọi, chỉ cần refetch.
Type safety:
Tách types FE vào types/wallet.ts để tái dụng; tránh lẫn với payload.
Khi nào nên làm ngay
Áp dụng react-query + hooks cho wallet/summary và deposit mutation (tác động UX lớn nhất).
Dùng zod + RHF cho form nạp (tránh lỗi 500 do payload không hợp lệ).
Bổ sung skeletons/loading và chặn double-click.
Khi cần thêm
Trang “Tất cả giao dịch” + infinite query.
Unit test cho hooks (mock axios).