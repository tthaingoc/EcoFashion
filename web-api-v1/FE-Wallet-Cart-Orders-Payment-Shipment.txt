Update Todos
  ⎿  ☒ Create OrderPaymentService with PayWithWallet method             
     ☒ Create SettlementService with CreateSettlementsForOrder method
     ☒ Add ReleasePayoutsForOrder method to SettlementService
     ☒ Create checkout controller endpoints for wallet payments
     ☒ Add settlements controller for payout release
     ☒ Update existing payment callback to integrate settlement creation
     ☒ Add admin wallet configuration

● Đã hoàn thành tất cả các thành phần cần thiết cho hệ thống thanh toán ví + chia tiền đa seller theo yêu cầu của bạn:

  ✅ Đã Implementation

  1. OrderPaymentService - Thanh toán qua ví:
  - PayWithWalletAsync(): Thanh toán đơn lẻ qua ví
  - PayGroupWithWalletAsync(): Thanh toán nhóm đơn qua ví

  2. SettlementService - Quản lý chia tiền:
  - CreateSettlementsForOrderAsync(): Tạo settlement theo từng seller
  - ReleasePayoutsForOrderAsync(): Chi trả 90% cho seller, giữ 10% admin
  - ReleasePayoutsForGroupAsync(): Chi trả cho nhóm đơn

  3. Controller Endpoints:
  - POST /api/checkout/pay-with-wallet: Thanh toán đơn qua ví
  - POST /api/checkout/pay-group-with-wallet: Thanh toán nhóm đơn
  - POST /api/settlements/release: Admin chi trả (có auth)
  - POST /api/settlements/demo-complete-order: Demo hoàn thành đơn

  4. Tích hợp PaymentService:
  - VNPay callback tự động tạo settlement + chi trả
  - Demo shipment: sau paid → delivered → chia tiền

  5. Configuration:
  - AdminUserId: 1, CommissionRate: 10% trong appsettings.json
  - Service registration trong DI container

  6. WalletService mở rộng:
  - GetWalletByUserIdAsync(): Lấy/tạo ví user
  - CreateTransactionAsync(): Ghi giao dịch với OrderId/SettlementId

  🔄 Luồng hoạt động

  Thanh toán ví:
  1. Customer gọi /pay-with-wallet → trừ ví customer, cộng ví admin
  2. Tạo OrderSellerSettlement (Pending) theo từng seller
  3. Demo: tự động delivered + release payout ngay

  Thanh toán VNPay (hiện tại):
  1. VNPay callback success → tạo settlement → release payout → delivered

  Chia tiền:
  - Admin giữ 10% commission
  - 90% chuyển cho seller (supplier/designer) khi delivered

  Hệ thống đã sẵn sàng để test cả 2 cách thanh toán và chia tiền theo đúng yêu cầu của bạn!

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

Features Added (already done)

  1. Address Integration in Checkout:
  - Modified create-session-from-cart to accept AddressId parameter
  - Auto-loads default address if no address is specified
  - Uses formatted address string from UserAddress entity

  2. Address Management During Checkout:
  - GET /api/checkout/addresses - Get user's saved addresses
  - POST /api/checkout/create-address - Create new address during checkout
  - PUT /api/checkout/update-address/{addressId} - Update existing address

  3. Order Address Updates:
  - PUT /api/checkout/order/{orderId}/address - Update single order address
  - PUT /api/checkout/order-group/{orderGroupId}/address - Update order group address
  - Support both AddressId (saved address) and direct ShippingAddress string

  4. Service Layer Enhancements:
  - Added UserAddressService dependency to CheckoutService
  - UpdateOrderAddressAsync() - Update order with saved address
  - UpdateOrderGroupAddressAsync() - Update multiple orders in group
  - UpdateOrderAddressDirectAsync() - Update with custom address string

  🔄 Usage Flow

  1. Checkout with Saved Address:
  POST /api/checkout/create-session-from-cart
  {
    "addressId": 123
  }

  2. Checkout with Custom Address:
  POST /api/checkout/create-session-from-cart
  {
    "shippingAddress": "123 Custom Street, District, City"
  }

  3. Create New Address During Checkout:
  POST /api/checkout/create-address
  {
    "addressLine": "123 New Street",
    "district": "District 1",
    "city": "Ho Chi Minh City",
    "isDefault": false
  }

  4. Update Order Address:
  PUT /api/checkout/order/{orderId}/address
  {
    "addressId": 456
  }

  The system now fully supports address management during checkout, allowing users to:
  - Use their saved addresses
  - Create new addresses on-the-fly
  - Update order addresses before payment
  - Manage default addresses
  - Format addresses consistently for display

  All address changes are only allowed for orders with PaymentStatus.Pending to prevent modification of paid orders.

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Gợi ý cải thiện FE cho ví (ngắn gọn, áp dụng dần)
TanStack Query (react-query): quản lý data wallet/summary, transactions, và mutation nạp/rút; cache + tự động refetch sau callback VNPay.
Cache keys: ['wallet','summary'], ['wallet','transactions', page, pageSize]
Sau khi nạp thành công: queryClient.invalidateQueries({queryKey:['wallet']})
Custom hooks: gom API + query/mutation, UI gọi hook, code gọn và dễ test.
useWalletSummary(), useWalletTransactions(p, s), useInitiateDeposit(), useRequestWithdraw()
Zod + react-hook-form: validate form nạp/rút (số tiền min/max, bội số, mô tả).
Hiện bạn đang validate thủ công; dùng schema -> lỗi hiển thị nhất quán, ít bug.
UI/UX:
Loading skeletons cho phần số dư và lịch sử.
Chặn double-submit (disable nút, pending state).
Toast cho lỗi API (dựa vào interceptor đã có).
“Xem tất cả giao dịch” → trang riêng có phân trang vô hạn (infinite query) hoặc pagination.
Đồng bộ callback VNPay:
Ở WalletPage, sau khi detect vnp_*, gọi queryClient.invalidateQueries(['wallet']) để cập nhật số dư/tóm tắt.
Không cần call backend callback nữa vì VNPay đã gọi, chỉ cần refetch.
Type safety:
Tách types FE vào types/wallet.ts để tái dụng; tránh lẫn với payload.
Khi nào nên làm ngay
Áp dụng react-query + hooks cho wallet/summary và deposit mutation (tác động UX lớn nhất).
Dùng zod + RHF cho form nạp (tránh lỗi 500 do payload không hợp lệ).
Bổ sung skeletons/loading và chặn double-click.
Khi cần thêm
Trang “Tất cả giao dịch” + infinite query.
Unit test cho hooks (mock axios).
